### YamlMime:ManagedReference
items:
- uid: netDxf.Vector2
  commentId: T:netDxf.Vector2
  id: Vector2
  parent: netDxf
  children:
  - netDxf.Vector2.#ctor(System.Double)
  - netDxf.Vector2.#ctor(System.Double,System.Double)
  - netDxf.Vector2.#ctor(System.Double[])
  - netDxf.Vector2.Add(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.Angle(netDxf.Vector2)
  - netDxf.Vector2.Angle(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.AngleBetween(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)
  - netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)
  - netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.Divide(netDxf.Vector2,System.Double)
  - netDxf.Vector2.Divide(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.Equals(System.Object)
  - netDxf.Vector2.Equals(netDxf.Vector2)
  - netDxf.Vector2.Equals(netDxf.Vector2,System.Double)
  - netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2,System.Double)
  - netDxf.Vector2.GetHashCode
  - netDxf.Vector2.IsNaN(netDxf.Vector2)
  - netDxf.Vector2.IsNormalized
  - netDxf.Vector2.IsZero(netDxf.Vector2)
  - netDxf.Vector2.Item(System.Int32)
  - netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.Modulus
  - netDxf.Vector2.Multiply(System.Double,netDxf.Vector2)
  - netDxf.Vector2.Multiply(netDxf.Vector2,System.Double)
  - netDxf.Vector2.Multiply(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.NaN
  - netDxf.Vector2.Negate(netDxf.Vector2)
  - netDxf.Vector2.Normalize
  - netDxf.Vector2.Normalize(netDxf.Vector2)
  - netDxf.Vector2.Perpendicular(netDxf.Vector2)
  - netDxf.Vector2.Polar(netDxf.Vector2,System.Double,System.Double)
  - netDxf.Vector2.Rotate(netDxf.Vector2,System.Double)
  - netDxf.Vector2.Round(netDxf.Vector2,System.Int32)
  - netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.Subtract(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.ToArray
  - netDxf.Vector2.ToString
  - netDxf.Vector2.ToString(System.IFormatProvider)
  - netDxf.Vector2.UnitX
  - netDxf.Vector2.UnitY
  - netDxf.Vector2.X
  - netDxf.Vector2.Y
  - netDxf.Vector2.Zero
  - netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)
  - netDxf.Vector2.op_Division(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)
  - netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)
  - netDxf.Vector2.op_Multiply(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)
  - netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)
  langs:
  - csharp
  - vb
  name: Vector2
  nameWithType: Vector2
  fullName: netDxf.Vector2
  type: Struct
  source:
    id: Vector2
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 33
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Represent a two component vector of double precision.
  example: []
  syntax:
    content: 'public struct Vector2 : IEquatable<Vector2>'
    content.vb: Public Structure Vector2 Implements IEquatable(Of Vector2)
  implements:
  - System.IEquatable{netDxf.Vector2}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: netDxf.Vector2.#ctor(System.Double)
  commentId: M:netDxf.Vector2.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Vector2(double)
  nameWithType: Vector2.Vector2(double)
  fullName: netDxf.Vector2.Vector2(double)
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 50
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Initializes a new instance of Vector2.
  example: []
  syntax:
    content: public Vector2(double value)
    parameters:
    - id: value
      type: System.Double
      description: X, Y component.
    content.vb: Public Sub New(value As Double)
  overload: netDxf.Vector2.#ctor*
  nameWithType.vb: Vector2.New(Double)
  fullName.vb: netDxf.Vector2.New(Double)
  name.vb: New(Double)
- uid: netDxf.Vector2.#ctor(System.Double,System.Double)
  commentId: M:netDxf.Vector2.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Vector2(double, double)
  nameWithType: Vector2.Vector2(double, double)
  fullName: netDxf.Vector2.Vector2(double, double)
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 62
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Initializes a new instance of Vector2.
  example: []
  syntax:
    content: public Vector2(double x, double y)
    parameters:
    - id: x
      type: System.Double
      description: X component.
    - id: y
      type: System.Double
      description: Y component.
    content.vb: Public Sub New(x As Double, y As Double)
  overload: netDxf.Vector2.#ctor*
  nameWithType.vb: Vector2.New(Double, Double)
  fullName.vb: netDxf.Vector2.New(Double, Double)
  name.vb: New(Double, Double)
- uid: netDxf.Vector2.#ctor(System.Double[])
  commentId: M:netDxf.Vector2.#ctor(System.Double[])
  id: '#ctor(System.Double[])'
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Vector2(double[])
  nameWithType: Vector2.Vector2(double[])
  fullName: netDxf.Vector2.Vector2(double[])
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 73
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Initializes a new instance of Vector2.
  example: []
  syntax:
    content: public Vector2(double[] array)
    parameters:
    - id: array
      type: System.Double[]
      description: Array of two elements that represents the vector.
    content.vb: Public Sub New(array As Double())
  overload: netDxf.Vector2.#ctor*
  nameWithType.vb: Vector2.New(Double())
  fullName.vb: netDxf.Vector2.New(Double())
  name.vb: New(Double())
- uid: netDxf.Vector2.Zero
  commentId: P:netDxf.Vector2.Zero
  id: Zero
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector2.Zero
  fullName: netDxf.Vector2.Zero
  type: Property
  source:
    id: Zero
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 97
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Zero vector.
  example: []
  syntax:
    content: public static Vector2 Zero { get; }
    parameters: []
    return:
      type: netDxf.Vector2
    content.vb: Public Shared ReadOnly Property Zero As Vector2
  overload: netDxf.Vector2.Zero*
- uid: netDxf.Vector2.UnitX
  commentId: P:netDxf.Vector2.UnitX
  id: UnitX
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Vector2.UnitX
  fullName: netDxf.Vector2.UnitX
  type: Property
  source:
    id: UnitX
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 105
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Unit X vector.
  example: []
  syntax:
    content: public static Vector2 UnitX { get; }
    parameters: []
    return:
      type: netDxf.Vector2
    content.vb: Public Shared ReadOnly Property UnitX As Vector2
  overload: netDxf.Vector2.UnitX*
- uid: netDxf.Vector2.UnitY
  commentId: P:netDxf.Vector2.UnitY
  id: UnitY
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Vector2.UnitY
  fullName: netDxf.Vector2.UnitY
  type: Property
  source:
    id: UnitY
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 113
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Unit Y vector.
  example: []
  syntax:
    content: public static Vector2 UnitY { get; }
    parameters: []
    return:
      type: netDxf.Vector2
    content.vb: Public Shared ReadOnly Property UnitY As Vector2
  overload: netDxf.Vector2.UnitY*
- uid: netDxf.Vector2.NaN
  commentId: P:netDxf.Vector2.NaN
  id: NaN
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: NaN
  nameWithType: Vector2.NaN
  fullName: netDxf.Vector2.NaN
  type: Property
  source:
    id: NaN
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 121
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Represents a vector with not a number components.
  example: []
  syntax:
    content: public static Vector2 NaN { get; }
    parameters: []
    return:
      type: netDxf.Vector2
    content.vb: Public Shared ReadOnly Property NaN As Vector2
  overload: netDxf.Vector2.NaN*
- uid: netDxf.Vector2.X
  commentId: P:netDxf.Vector2.X
  id: X
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector2.X
  fullName: netDxf.Vector2.X
  type: Property
  source:
    id: X
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 133
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets the X component.
  example: []
  syntax:
    content: public double X { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property X As Double
  overload: netDxf.Vector2.X*
- uid: netDxf.Vector2.Y
  commentId: P:netDxf.Vector2.Y
  id: Y
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector2.Y
  fullName: netDxf.Vector2.Y
  type: Property
  source:
    id: Y
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 146
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets the Y component.
  example: []
  syntax:
    content: public double Y { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Y As Double
  overload: netDxf.Vector2.Y*
- uid: netDxf.Vector2.Item(System.Int32)
  commentId: P:netDxf.Vector2.Item(System.Int32)
  id: Item(System.Int32)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: Vector2.this[int]
  fullName: netDxf.Vector2.this[int]
  type: Property
  source:
    id: this[]
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 160
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets a vector element defined by its index.
  example: []
  syntax:
    content: public double this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of the element.
    return:
      type: System.Double
    content.vb: Public Default Property this[](index As Integer) As Double
  overload: netDxf.Vector2.Item*
  nameWithType.vb: Vector2.this[](Integer)
  fullName.vb: netDxf.Vector2.this[](Integer)
  name.vb: this[](Integer)
- uid: netDxf.Vector2.IsNormalized
  commentId: P:netDxf.Vector2.IsNormalized
  id: IsNormalized
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: IsNormalized
  nameWithType: Vector2.IsNormalized
  fullName: netDxf.Vector2.IsNormalized
  type: Property
  source:
    id: IsNormalized
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 194
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets if the vector has been normalized.
  example: []
  syntax:
    content: public bool IsNormalized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNormalized As Boolean
  overload: netDxf.Vector2.IsNormalized*
- uid: netDxf.Vector2.IsNaN(netDxf.Vector2)
  commentId: M:netDxf.Vector2.IsNaN(netDxf.Vector2)
  id: IsNaN(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: IsNaN(Vector2)
  nameWithType: Vector2.IsNaN(Vector2)
  fullName: netDxf.Vector2.IsNaN(netDxf.Vector2)
  type: Method
  source:
    id: IsNaN
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 208
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool IsNaN(Vector2 u)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Boolean
      description: Returns true if any component of the specified vector evaluates to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>; otherwise, false.
    content.vb: Public Shared Function IsNaN(u As Vector2) As Boolean
  overload: netDxf.Vector2.IsNaN*
- uid: netDxf.Vector2.IsZero(netDxf.Vector2)
  commentId: M:netDxf.Vector2.IsZero(netDxf.Vector2)
  id: IsZero(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: IsZero(Vector2)
  nameWithType: Vector2.IsZero(Vector2)
  fullName: netDxf.Vector2.IsZero(netDxf.Vector2)
  type: Method
  source:
    id: IsZero
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 218
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns a value indicating if all components of the specified vector evaluates to zero.
  example: []
  syntax:
    content: public static bool IsZero(Vector2 u)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Boolean
      description: Returns true if all components of the specified vector evaluates to zero; otherwise, false.
    content.vb: Public Shared Function IsZero(u As Vector2) As Boolean
  overload: netDxf.Vector2.IsZero*
- uid: netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)
  id: DotProduct(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: DotProduct(Vector2, Vector2)
  nameWithType: Vector2.DotProduct(Vector2, Vector2)
  fullName: netDxf.Vector2.DotProduct(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: DotProduct
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 229
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the dot product of two vectors.
  example: []
  syntax:
    content: public static double DotProduct(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Double
      description: The dot product.
    content.vb: Public Shared Function DotProduct(u As Vector2, v As Vector2) As Double
  overload: netDxf.Vector2.DotProduct*
- uid: netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)
  id: CrossProduct(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: CrossProduct(Vector2, Vector2)
  nameWithType: Vector2.CrossProduct(Vector2, Vector2)
  fullName: netDxf.Vector2.CrossProduct(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: CrossProduct
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 240
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the cross product of two vectors.
  example: []
  syntax:
    content: public static double CrossProduct(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Double
      description: The cross product.
    content.vb: Public Shared Function CrossProduct(u As Vector2, v As Vector2) As Double
  overload: netDxf.Vector2.CrossProduct*
- uid: netDxf.Vector2.Perpendicular(netDxf.Vector2)
  commentId: M:netDxf.Vector2.Perpendicular(netDxf.Vector2)
  id: Perpendicular(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Perpendicular(Vector2)
  nameWithType: Vector2.Perpendicular(Vector2)
  fullName: netDxf.Vector2.Perpendicular(netDxf.Vector2)
  type: Method
  source:
    id: Perpendicular
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 250
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the counter clockwise perpendicular vector.
  example: []
  syntax:
    content: public static Vector2 Perpendicular(Vector2 u)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The perpendicular vector.
    content.vb: Public Shared Function Perpendicular(u As Vector2) As Vector2
  overload: netDxf.Vector2.Perpendicular*
- uid: netDxf.Vector2.Rotate(netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.Rotate(netDxf.Vector2,System.Double)
  id: Rotate(netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Rotate(Vector2, double)
  nameWithType: Vector2.Rotate(Vector2, double)
  fullName: netDxf.Vector2.Rotate(netDxf.Vector2, double)
  type: Method
  source:
    id: Rotate
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 261
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Rotates a vector.
  example: []
  syntax:
    content: public static Vector2 Rotate(Vector2 u, double angle)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: angle
      type: System.Double
      description: Rotation angles in radians.
    return:
      type: netDxf.Vector2
      description: The rotated vector.
    content.vb: Public Shared Function Rotate(u As Vector2, angle As Double) As Vector2
  overload: netDxf.Vector2.Rotate*
  nameWithType.vb: Vector2.Rotate(Vector2, Double)
  fullName.vb: netDxf.Vector2.Rotate(netDxf.Vector2, Double)
  name.vb: Rotate(Vector2, Double)
- uid: netDxf.Vector2.Polar(netDxf.Vector2,System.Double,System.Double)
  commentId: M:netDxf.Vector2.Polar(netDxf.Vector2,System.Double,System.Double)
  id: Polar(netDxf.Vector2,System.Double,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Polar(Vector2, double, double)
  nameWithType: Vector2.Polar(Vector2, double, double)
  fullName: netDxf.Vector2.Polar(netDxf.Vector2, double, double)
  type: Method
  source:
    id: Polar
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 275
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the polar point of another point.
  example: []
  syntax:
    content: public static Vector2 Polar(Vector2 u, double distance, double angle)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Reference point.
    - id: distance
      type: System.Double
      description: Distance from point u.
    - id: angle
      type: System.Double
      description: Angle in radians.
    return:
      type: netDxf.Vector2
      description: The polar point of the specified point.
    content.vb: Public Shared Function Polar(u As Vector2, distance As Double, angle As Double) As Vector2
  overload: netDxf.Vector2.Polar*
  nameWithType.vb: Vector2.Polar(Vector2, Double, Double)
  fullName.vb: netDxf.Vector2.Polar(netDxf.Vector2, Double, Double)
  name.vb: Polar(Vector2, Double, Double)
- uid: netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)
  id: SquareDistance(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: SquareDistance(Vector2, Vector2)
  nameWithType: Vector2.SquareDistance(Vector2, Vector2)
  fullName: netDxf.Vector2.SquareDistance(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: SquareDistance
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 287
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the square distance between two points.
  example: []
  syntax:
    content: public static double SquareDistance(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Double
      description: Square distance.
    content.vb: Public Shared Function SquareDistance(u As Vector2, v As Vector2) As Double
  overload: netDxf.Vector2.SquareDistance*
- uid: netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)
  id: Distance(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Distance(Vector2, Vector2)
  nameWithType: Vector2.Distance(Vector2, Vector2)
  fullName: netDxf.Vector2.Distance(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: Distance
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 298
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the distance between two points.
  example: []
  syntax:
    content: public static double Distance(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Double
      description: Distance.
    content.vb: Public Shared Function Distance(u As Vector2, v As Vector2) As Double
  overload: netDxf.Vector2.Distance*
- uid: netDxf.Vector2.Angle(netDxf.Vector2)
  commentId: M:netDxf.Vector2.Angle(netDxf.Vector2)
  id: Angle(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Angle(Vector2)
  nameWithType: Vector2.Angle(Vector2)
  fullName: netDxf.Vector2.Angle(netDxf.Vector2)
  type: Method
  source:
    id: Angle
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 308
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the angle of a vector.
  example: []
  syntax:
    content: public static double Angle(Vector2 u)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: A Vector2.
    return:
      type: System.Double
      description: Angle in radians.
    content.vb: Public Shared Function Angle(u As Vector2) As Double
  overload: netDxf.Vector2.Angle*
- uid: netDxf.Vector2.Angle(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Angle(netDxf.Vector2,netDxf.Vector2)
  id: Angle(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Angle(Vector2, Vector2)
  nameWithType: Vector2.Angle(Vector2, Vector2)
  fullName: netDxf.Vector2.Angle(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: Angle
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 325
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the angle of a line defined by two points.
  example: []
  syntax:
    content: public static double Angle(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: A Vector2.
    - id: v
      type: netDxf.Vector2
      description: A Vector2.
    return:
      type: System.Double
      description: Angle in radians.
    content.vb: Public Shared Function Angle(u As Vector2, v As Vector2) As Double
  overload: netDxf.Vector2.Angle*
- uid: netDxf.Vector2.AngleBetween(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.AngleBetween(netDxf.Vector2,netDxf.Vector2)
  id: AngleBetween(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: AngleBetween(Vector2, Vector2)
  nameWithType: Vector2.AngleBetween(Vector2, Vector2)
  fullName: netDxf.Vector2.AngleBetween(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: AngleBetween
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 337
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the angle between two vectors.
  example: []
  syntax:
    content: public static double AngleBetween(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Double
      description: Angle in radians.
    content.vb: Public Shared Function AngleBetween(u As Vector2, v As Vector2) As Double
  overload: netDxf.Vector2.AngleBetween*
- uid: netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)
  id: MidPoint(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: MidPoint(Vector2, Vector2)
  nameWithType: Vector2.MidPoint(Vector2, Vector2)
  fullName: netDxf.Vector2.MidPoint(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: MidPoint
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 359
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the midpoint.
  example: []
  syntax:
    content: public static Vector2 MidPoint(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: Vector2.
    content.vb: Public Shared Function MidPoint(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.MidPoint*
- uid: netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2)
  id: ArePerpendicular(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: ArePerpendicular(Vector2, Vector2)
  nameWithType: Vector2.ArePerpendicular(Vector2, Vector2)
  fullName: netDxf.Vector2.ArePerpendicular(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: ArePerpendicular
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 370
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Checks if two vectors are perpendicular.
  example: []
  syntax:
    content: public static bool ArePerpendicular(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Boolean
      description: True if are perpendicular or false in any other case.
    content.vb: Public Shared Function ArePerpendicular(u As Vector2, v As Vector2) As Boolean
  overload: netDxf.Vector2.ArePerpendicular*
- uid: netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)
  id: ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: ArePerpendicular(Vector2, Vector2, double)
  nameWithType: Vector2.ArePerpendicular(Vector2, Vector2, double)
  fullName: netDxf.Vector2.ArePerpendicular(netDxf.Vector2, netDxf.Vector2, double)
  type: Method
  source:
    id: ArePerpendicular
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 382
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Checks if two vectors are perpendicular.
  example: []
  syntax:
    content: public static bool ArePerpendicular(Vector2 u, Vector2 v, double threshold)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    - id: threshold
      type: System.Double
      description: Tolerance used.
    return:
      type: System.Boolean
      description: True if are perpendicular or false in any other case.
    content.vb: Public Shared Function ArePerpendicular(u As Vector2, v As Vector2, threshold As Double) As Boolean
  overload: netDxf.Vector2.ArePerpendicular*
  nameWithType.vb: Vector2.ArePerpendicular(Vector2, Vector2, Double)
  fullName.vb: netDxf.Vector2.ArePerpendicular(netDxf.Vector2, netDxf.Vector2, Double)
  name.vb: ArePerpendicular(Vector2, Vector2, Double)
- uid: netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2)
  id: AreParallel(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: AreParallel(Vector2, Vector2)
  nameWithType: Vector2.AreParallel(Vector2, Vector2)
  fullName: netDxf.Vector2.AreParallel(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: AreParallel
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 393
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Checks if two vectors are parallel.
  example: []
  syntax:
    content: public static bool AreParallel(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Boolean
      description: True if are parallel or false in any other case.
    content.vb: Public Shared Function AreParallel(u As Vector2, v As Vector2) As Boolean
  overload: netDxf.Vector2.AreParallel*
- uid: netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)
  id: AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: AreParallel(Vector2, Vector2, double)
  nameWithType: Vector2.AreParallel(Vector2, Vector2, double)
  fullName: netDxf.Vector2.AreParallel(netDxf.Vector2, netDxf.Vector2, double)
  type: Method
  source:
    id: AreParallel
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 405
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Checks if two vectors are parallel.
  example: []
  syntax:
    content: public static bool AreParallel(Vector2 u, Vector2 v, double threshold)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    - id: threshold
      type: System.Double
      description: Tolerance used.
    return:
      type: System.Boolean
      description: True if are parallel or false in any other case.
    content.vb: Public Shared Function AreParallel(u As Vector2, v As Vector2, threshold As Double) As Boolean
  overload: netDxf.Vector2.AreParallel*
  nameWithType.vb: Vector2.AreParallel(Vector2, Vector2, Double)
  fullName.vb: netDxf.Vector2.AreParallel(netDxf.Vector2, netDxf.Vector2, Double)
  name.vb: AreParallel(Vector2, Vector2, Double)
- uid: netDxf.Vector2.Round(netDxf.Vector2,System.Int32)
  commentId: M:netDxf.Vector2.Round(netDxf.Vector2,System.Int32)
  id: Round(netDxf.Vector2,System.Int32)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Round(Vector2, int)
  nameWithType: Vector2.Round(Vector2, int)
  fullName: netDxf.Vector2.Round(netDxf.Vector2, int)
  type: Method
  source:
    id: Round
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 416
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Rounds the components of a vector.
  example: []
  syntax:
    content: public static Vector2 Round(Vector2 u, int numDigits)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: numDigits
      type: System.Int32
      description: Number of decimal places in the return value.
    return:
      type: netDxf.Vector2
      description: Vector2.
    content.vb: Public Shared Function Round(u As Vector2, numDigits As Integer) As Vector2
  overload: netDxf.Vector2.Round*
  nameWithType.vb: Vector2.Round(Vector2, Integer)
  fullName.vb: netDxf.Vector2.Round(netDxf.Vector2, Integer)
  name.vb: Round(Vector2, Integer)
- uid: netDxf.Vector2.Normalize(netDxf.Vector2)
  commentId: M:netDxf.Vector2.Normalize(netDxf.Vector2)
  id: Normalize(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Normalize(Vector2)
  nameWithType: Vector2.Normalize(Vector2)
  fullName: netDxf.Vector2.Normalize(netDxf.Vector2)
  type: Method
  source:
    id: Normalize
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 426
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Normalizes the vector.
  example: []
  syntax:
    content: public static Vector2 Normalize(Vector2 u)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector to normalize
    return:
      type: netDxf.Vector2
      description: A normalized vector.
    content.vb: Public Shared Function Normalize(u As Vector2) As Vector2
  overload: netDxf.Vector2.Normalize*
- uid: netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)
  id: op_Equality(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator ==(Vector2, Vector2)
  nameWithType: Vector2.operator ==(Vector2, Vector2)
  fullName: netDxf.Vector2.operator ==(netDxf.Vector2, netDxf.Vector2)
  type: Operator
  source:
    id: op_Equality
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 453
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are equal.
  example: []
  syntax:
    content: public static bool operator ==(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Boolean
      description: True if the two components are equal or false in any other case.
    content.vb: Public Shared Operator =(u As Vector2, v As Vector2) As Boolean
  overload: netDxf.Vector2.op_Equality*
  nameWithType.vb: Vector2.=(Vector2, Vector2)
  fullName.vb: netDxf.Vector2.=(netDxf.Vector2, netDxf.Vector2)
  name.vb: =(Vector2, Vector2)
- uid: netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)
  id: op_Inequality(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator !=(Vector2, Vector2)
  nameWithType: Vector2.operator !=(Vector2, Vector2)
  fullName: netDxf.Vector2.operator !=(netDxf.Vector2, netDxf.Vector2)
  type: Operator
  source:
    id: op_Inequality
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 464
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are different.
  example: []
  syntax:
    content: public static bool operator !=(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Boolean
      description: True if the two components are different or false in any other case.
    content.vb: Public Shared Operator <>(u As Vector2, v As Vector2) As Boolean
  overload: netDxf.Vector2.op_Inequality*
  nameWithType.vb: Vector2.<>(Vector2, Vector2)
  fullName.vb: netDxf.Vector2.<>(netDxf.Vector2, netDxf.Vector2)
  name.vb: <>(Vector2, Vector2)
- uid: netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)
  id: op_Addition(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator +(Vector2, Vector2)
  nameWithType: Vector2.operator +(Vector2, Vector2)
  fullName: netDxf.Vector2.operator +(netDxf.Vector2, netDxf.Vector2)
  type: Operator
  source:
    id: op_Addition
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 475
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Adds two vectors.
  example: []
  syntax:
    content: public static Vector2 operator +(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The addition of u plus v.
    content.vb: Public Shared Operator +(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.op_Addition*
  nameWithType.vb: Vector2.+(Vector2, Vector2)
  fullName.vb: netDxf.Vector2.+(netDxf.Vector2, netDxf.Vector2)
  name.vb: +(Vector2, Vector2)
- uid: netDxf.Vector2.Add(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Add(netDxf.Vector2,netDxf.Vector2)
  id: Add(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Add(Vector2, Vector2)
  nameWithType: Vector2.Add(Vector2, Vector2)
  fullName: netDxf.Vector2.Add(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: Add
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 486
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Adds two vectors.
  example: []
  syntax:
    content: public static Vector2 Add(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The addition of u plus v.
    content.vb: Public Shared Function Add(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.Add*
- uid: netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)
  id: op_Subtraction(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator -(Vector2, Vector2)
  nameWithType: Vector2.operator -(Vector2, Vector2)
  fullName: netDxf.Vector2.operator -(netDxf.Vector2, netDxf.Vector2)
  type: Operator
  source:
    id: op_Subtraction
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 497
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Subtracts two vectors.
  example: []
  syntax:
    content: public static Vector2 operator -(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector3.
    - id: v
      type: netDxf.Vector2
      description: Vector3.
    return:
      type: netDxf.Vector2
      description: The subtraction of u minus v.
    content.vb: Public Shared Operator -(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.op_Subtraction*
  nameWithType.vb: Vector2.-(Vector2, Vector2)
  fullName.vb: netDxf.Vector2.-(netDxf.Vector2, netDxf.Vector2)
  name.vb: -(Vector2, Vector2)
- uid: netDxf.Vector2.Subtract(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Subtract(netDxf.Vector2,netDxf.Vector2)
  id: Subtract(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Subtract(Vector2, Vector2)
  nameWithType: Vector2.Subtract(Vector2, Vector2)
  fullName: netDxf.Vector2.Subtract(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: Subtract
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 508
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Subtracts two vectors.
  example: []
  syntax:
    content: public static Vector2 Subtract(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector3.
    - id: v
      type: netDxf.Vector2
      description: Vector3.
    return:
      type: netDxf.Vector2
      description: The subtraction of u minus v.
    content.vb: Public Shared Function Subtract(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.Subtract*
- uid: netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)
  id: op_UnaryNegation(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator -(Vector2)
  nameWithType: Vector2.operator -(Vector2)
  fullName: netDxf.Vector2.operator -(netDxf.Vector2)
  type: Operator
  source:
    id: op_UnaryNegation
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 518
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Negates a vector.
  example: []
  syntax:
    content: public static Vector2 operator -(Vector2 u)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The negative vector of u.
    content.vb: Public Shared Operator -(u As Vector2) As Vector2
  overload: netDxf.Vector2.op_UnaryNegation*
  nameWithType.vb: Vector2.-(Vector2)
  fullName.vb: netDxf.Vector2.-(netDxf.Vector2)
  name.vb: -(Vector2)
- uid: netDxf.Vector2.Negate(netDxf.Vector2)
  commentId: M:netDxf.Vector2.Negate(netDxf.Vector2)
  id: Negate(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Negate(Vector2)
  nameWithType: Vector2.Negate(Vector2)
  fullName: netDxf.Vector2.Negate(netDxf.Vector2)
  type: Method
  source:
    id: Negate
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 528
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Negates a vector.
  example: []
  syntax:
    content: public static Vector2 Negate(Vector2 u)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The negative vector of u.
    content.vb: Public Shared Function Negate(u As Vector2) As Vector2
  overload: netDxf.Vector2.Negate*
- uid: netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)
  id: op_Multiply(netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator *(Vector2, double)
  nameWithType: Vector2.operator *(Vector2, double)
  fullName: netDxf.Vector2.operator *(netDxf.Vector2, double)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 539
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a vector with an scalar.
  example: []
  syntax:
    content: public static Vector2 operator *(Vector2 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times a.
    content.vb: Public Shared Operator *(u As Vector2, a As Double) As Vector2
  overload: netDxf.Vector2.op_Multiply*
  nameWithType.vb: Vector2.*(Vector2, Double)
  fullName.vb: netDxf.Vector2.*(netDxf.Vector2, Double)
  name.vb: '*(Vector2, Double)'
- uid: netDxf.Vector2.Multiply(netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.Multiply(netDxf.Vector2,System.Double)
  id: Multiply(netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, double)
  nameWithType: Vector2.Multiply(Vector2, double)
  fullName: netDxf.Vector2.Multiply(netDxf.Vector2, double)
  type: Method
  source:
    id: Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 550
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a vector with an scalar.
  example: []
  syntax:
    content: public static Vector2 Multiply(Vector2 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times a.
    content.vb: Public Shared Function Multiply(u As Vector2, a As Double) As Vector2
  overload: netDxf.Vector2.Multiply*
  nameWithType.vb: Vector2.Multiply(Vector2, Double)
  fullName.vb: netDxf.Vector2.Multiply(netDxf.Vector2, Double)
  name.vb: Multiply(Vector2, Double)
- uid: netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)
  id: op_Multiply(System.Double,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator *(double, Vector2)
  nameWithType: Vector2.operator *(double, Vector2)
  fullName: netDxf.Vector2.operator *(double, netDxf.Vector2)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 561
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a scalar with a vector.
  example: []
  syntax:
    content: public static Vector2 operator *(double a, Vector2 u)
    parameters:
    - id: a
      type: System.Double
      description: Scalar.
    - id: u
      type: netDxf.Vector2
      description: Vector3.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times a.
    content.vb: Public Shared Operator *(a As Double, u As Vector2) As Vector2
  overload: netDxf.Vector2.op_Multiply*
  nameWithType.vb: Vector2.*(Double, Vector2)
  fullName.vb: netDxf.Vector2.*(Double, netDxf.Vector2)
  name.vb: '*(Double, Vector2)'
- uid: netDxf.Vector2.Multiply(System.Double,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Multiply(System.Double,netDxf.Vector2)
  id: Multiply(System.Double,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(double, Vector2)
  nameWithType: Vector2.Multiply(double, Vector2)
  fullName: netDxf.Vector2.Multiply(double, netDxf.Vector2)
  type: Method
  source:
    id: Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 572
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a scalar with a vector.
  example: []
  syntax:
    content: public static Vector2 Multiply(double a, Vector2 u)
    parameters:
    - id: a
      type: System.Double
      description: Scalar.
    - id: u
      type: netDxf.Vector2
      description: Vector3.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times a.
    content.vb: Public Shared Function Multiply(a As Double, u As Vector2) As Vector2
  overload: netDxf.Vector2.Multiply*
  nameWithType.vb: Vector2.Multiply(Double, Vector2)
  fullName.vb: netDxf.Vector2.Multiply(Double, netDxf.Vector2)
  name.vb: Multiply(Double, Vector2)
- uid: netDxf.Vector2.op_Multiply(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_Multiply(netDxf.Vector2,netDxf.Vector2)
  id: op_Multiply(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator *(Vector2, Vector2)
  nameWithType: Vector2.operator *(Vector2, Vector2)
  fullName: netDxf.Vector2.operator *(netDxf.Vector2, netDxf.Vector2)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 583
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies two vectors component by component.
  example: []
  syntax:
    content: public static Vector2 operator *(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times v.
    content.vb: Public Shared Operator *(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.op_Multiply*
  nameWithType.vb: Vector2.*(Vector2, Vector2)
  fullName.vb: netDxf.Vector2.*(netDxf.Vector2, netDxf.Vector2)
  name.vb: '*(Vector2, Vector2)'
- uid: netDxf.Vector2.Multiply(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Multiply(netDxf.Vector2,netDxf.Vector2)
  id: Multiply(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Multiply(Vector2, Vector2)
  nameWithType: Vector2.Multiply(Vector2, Vector2)
  fullName: netDxf.Vector2.Multiply(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 594
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies two vectors component by component.
  example: []
  syntax:
    content: public static Vector2 Multiply(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times v.
    content.vb: Public Shared Function Multiply(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.Multiply*
- uid: netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)
  id: op_Division(netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator /(Vector2, double)
  nameWithType: Vector2.operator /(Vector2, double)
  fullName: netDxf.Vector2.operator /(netDxf.Vector2, double)
  type: Operator
  source:
    id: op_Division
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 605
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides a vector with an scalar.
  example: []
  syntax:
    content: public static Vector2 operator /(Vector2 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector2
      description: The division of u times a.
    content.vb: Public Shared Operator /(u As Vector2, a As Double) As Vector2
  overload: netDxf.Vector2.op_Division*
  nameWithType.vb: Vector2./(Vector2, Double)
  fullName.vb: netDxf.Vector2./(netDxf.Vector2, Double)
  name.vb: /(Vector2, Double)
- uid: netDxf.Vector2.Divide(netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.Divide(netDxf.Vector2,System.Double)
  id: Divide(netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Divide(Vector2, double)
  nameWithType: Vector2.Divide(Vector2, double)
  fullName: netDxf.Vector2.Divide(netDxf.Vector2, double)
  type: Method
  source:
    id: Divide
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 617
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides a vector with an scalar.
  example: []
  syntax:
    content: public static Vector2 Divide(Vector2 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector2
      description: The division of u times a.
    content.vb: Public Shared Function Divide(u As Vector2, a As Double) As Vector2
  overload: netDxf.Vector2.Divide*
  nameWithType.vb: Vector2.Divide(Vector2, Double)
  fullName.vb: netDxf.Vector2.Divide(netDxf.Vector2, Double)
  name.vb: Divide(Vector2, Double)
- uid: netDxf.Vector2.op_Division(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.op_Division(netDxf.Vector2,netDxf.Vector2)
  id: op_Division(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: operator /(Vector2, Vector2)
  nameWithType: Vector2.operator /(Vector2, Vector2)
  fullName: netDxf.Vector2.operator /(netDxf.Vector2, netDxf.Vector2)
  type: Operator
  source:
    id: op_Division
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 629
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides two vectors component by component.
  example: []
  syntax:
    content: public static Vector2 operator /(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times v.
    content.vb: Public Shared Operator /(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.op_Division*
  nameWithType.vb: Vector2./(Vector2, Vector2)
  fullName.vb: netDxf.Vector2./(netDxf.Vector2, netDxf.Vector2)
  name.vb: /(Vector2, Vector2)
- uid: netDxf.Vector2.Divide(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Divide(netDxf.Vector2,netDxf.Vector2)
  id: Divide(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Divide(Vector2, Vector2)
  nameWithType: Vector2.Divide(Vector2, Vector2)
  fullName: netDxf.Vector2.Divide(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: Divide
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 640
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides two vectors component by component.
  example: []
  syntax:
    content: public static Vector2 Divide(Vector2 u, Vector2 v)
    parameters:
    - id: u
      type: netDxf.Vector2
      description: Vector2.
    - id: v
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: netDxf.Vector2
      description: The multiplication of u times v.
    content.vb: Public Shared Function Divide(u As Vector2, v As Vector2) As Vector2
  overload: netDxf.Vector2.Divide*
- uid: netDxf.Vector2.Normalize
  commentId: M:netDxf.Vector2.Normalize
  id: Normalize
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector2.Normalize()
  fullName: netDxf.Vector2.Normalize()
  type: Method
  source:
    id: Normalize
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 652
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Normalizes the vector.
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize()
  overload: netDxf.Vector2.Normalize*
- uid: netDxf.Vector2.Modulus
  commentId: M:netDxf.Vector2.Modulus
  id: Modulus
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Modulus()
  nameWithType: Vector2.Modulus()
  fullName: netDxf.Vector2.Modulus()
  type: Method
  source:
    id: Modulus
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 677
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the modulus of the vector.
  example: []
  syntax:
    content: public double Modulus()
    return:
      type: System.Double
      description: Vector modulus.
    content.vb: Public Function Modulus() As Double
  overload: netDxf.Vector2.Modulus*
- uid: netDxf.Vector2.ToArray
  commentId: M:netDxf.Vector2.ToArray
  id: ToArray
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: Vector2.ToArray()
  fullName: netDxf.Vector2.ToArray()
  type: Method
  source:
    id: ToArray
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 686
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns an array that represents the vector.
  example: []
  syntax:
    content: public double[] ToArray()
    return:
      type: System.Double[]
      description: Array.
    content.vb: Public Function ToArray() As Double()
  overload: netDxf.Vector2.ToArray*
- uid: netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2)
  commentId: M:netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2)
  id: Equals(netDxf.Vector2,netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Equals(Vector2, Vector2)
  nameWithType: Vector2.Equals(Vector2, Vector2)
  fullName: netDxf.Vector2.Equals(netDxf.Vector2, netDxf.Vector2)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 701
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equal.
  example: []
  syntax:
    content: public static bool Equals(Vector2 a, Vector2 b)
    parameters:
    - id: a
      type: netDxf.Vector2
      description: Vector2.
    - id: b
      type: netDxf.Vector2
      description: Vector2.
    return:
      type: System.Boolean
      description: True if the two components are almost equal or false in any other case.
    content.vb: Public Shared Function Equals(a As Vector2, b As Vector2) As Boolean
  overload: netDxf.Vector2.Equals*
- uid: netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2,System.Double)
  id: Equals(netDxf.Vector2,netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Equals(Vector2, Vector2, double)
  nameWithType: Vector2.Equals(Vector2, Vector2, double)
  fullName: netDxf.Vector2.Equals(netDxf.Vector2, netDxf.Vector2, double)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 713
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equal.
  example: []
  syntax:
    content: public static bool Equals(Vector2 a, Vector2 b, double threshold)
    parameters:
    - id: a
      type: netDxf.Vector2
      description: Vector2.
    - id: b
      type: netDxf.Vector2
      description: Vector2.
    - id: threshold
      type: System.Double
      description: Maximum tolerance.
    return:
      type: System.Boolean
      description: True if the two components are almost equal or false in any other case.
    content.vb: Public Shared Function Equals(a As Vector2, b As Vector2, threshold As Double) As Boolean
  overload: netDxf.Vector2.Equals*
  nameWithType.vb: Vector2.Equals(Vector2, Vector2, Double)
  fullName.vb: netDxf.Vector2.Equals(netDxf.Vector2, netDxf.Vector2, Double)
  name.vb: Equals(Vector2, Vector2, Double)
- uid: netDxf.Vector2.Equals(netDxf.Vector2)
  commentId: M:netDxf.Vector2.Equals(netDxf.Vector2)
  id: Equals(netDxf.Vector2)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Equals(Vector2)
  nameWithType: Vector2.Equals(Vector2)
  fullName: netDxf.Vector2.Equals(netDxf.Vector2)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 723
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equals.
  example: []
  syntax:
    content: public bool Equals(Vector2 other)
    parameters:
    - id: other
      type: netDxf.Vector2
      description: Another Vector2 to compare to.
    return:
      type: System.Boolean
      description: True if the three components are almost equal or false in any other case.
    content.vb: Public Function Equals(other As Vector2) As Boolean
  overload: netDxf.Vector2.Equals*
  implements:
  - System.IEquatable{netDxf.Vector2}.Equals(netDxf.Vector2)
- uid: netDxf.Vector2.Equals(netDxf.Vector2,System.Double)
  commentId: M:netDxf.Vector2.Equals(netDxf.Vector2,System.Double)
  id: Equals(netDxf.Vector2,System.Double)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Equals(Vector2, double)
  nameWithType: Vector2.Equals(Vector2, double)
  fullName: netDxf.Vector2.Equals(netDxf.Vector2, double)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 734
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equals.
  example: []
  syntax:
    content: public bool Equals(Vector2 other, double threshold)
    parameters:
    - id: other
      type: netDxf.Vector2
      description: Another Vector2 to compare to.
    - id: threshold
      type: System.Double
      description: Maximum tolerance.
    return:
      type: System.Boolean
      description: True if the three components are almost equal or false in any other case.
    content.vb: Public Function Equals(other As Vector2, threshold As Double) As Boolean
  overload: netDxf.Vector2.Equals*
  nameWithType.vb: Vector2.Equals(Vector2, Double)
  fullName.vb: netDxf.Vector2.Equals(netDxf.Vector2, Double)
  name.vb: Equals(Vector2, Double)
- uid: netDxf.Vector2.Equals(System.Object)
  commentId: M:netDxf.Vector2.Equals(System.Object)
  id: Equals(System.Object)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Vector2.Equals(object)
  fullName: netDxf.Vector2.Equals(object)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 744
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
      description: Another object to compare to.
    return:
      type: System.Boolean
      description: True if obj and this instance are the same type and represent the same value; otherwise, false.
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: netDxf.Vector2.Equals*
  nameWithType.vb: Vector2.Equals(Object)
  fullName.vb: netDxf.Vector2.Equals(Object)
  name.vb: Equals(Object)
- uid: netDxf.Vector2.GetHashCode
  commentId: M:netDxf.Vector2.GetHashCode
  id: GetHashCode
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector2.GetHashCode()
  fullName: netDxf.Vector2.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 758
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: netDxf.Vector2.GetHashCode*
- uid: netDxf.Vector2.ToString
  commentId: M:netDxf.Vector2.ToString
  id: ToString
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector2.ToString()
  fullName: netDxf.Vector2.ToString()
  type: Method
  source:
    id: ToString
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 771
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains a string that represents the vector.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string text.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: netDxf.Vector2.ToString*
- uid: netDxf.Vector2.ToString(System.IFormatProvider)
  commentId: M:netDxf.Vector2.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: netDxf.Vector2
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: Vector2.ToString(IFormatProvider)
  fullName: netDxf.Vector2.ToString(System.IFormatProvider)
  type: Method
  source:
    id: ToString
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector2.cs
    startLine: 781
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains a string that represents the vector.
  example: []
  syntax:
    content: public string ToString(IFormatProvider provider)
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An IFormatProvider interface implementation that supplies culture-specific formatting information.
    return:
      type: System.String
      description: A string text.
    content.vb: Public Function ToString(provider As IFormatProvider) As String
  overload: netDxf.Vector2.ToString*
references:
- uid: netDxf
  commentId: N:netDxf
  href: netDxf.html
  name: netDxf
  nameWithType: netDxf
  fullName: netDxf
- uid: System.IEquatable{netDxf.Vector2}
  commentId: T:System.IEquatable{netDxf.Vector2}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Vector2>
  nameWithType: IEquatable<Vector2>
  fullName: System.IEquatable<netDxf.Vector2>
  nameWithType.vb: IEquatable(Of Vector2)
  fullName.vb: System.IEquatable(Of netDxf.Vector2)
  name.vb: IEquatable(Of Vector2)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: netDxf.Vector2
    name: Vector2
    href: netDxf.Vector2.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: netDxf.Vector2
    name: Vector2
    href: netDxf.Vector2.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: netDxf.Vector2.#ctor*
  commentId: Overload:netDxf.Vector2.#ctor
  href: netDxf.Vector2.html#netDxf_Vector2__ctor_System_Double_
  name: Vector2
  nameWithType: Vector2.Vector2
  fullName: netDxf.Vector2.Vector2
  nameWithType.vb: Vector2.New
  fullName.vb: netDxf.Vector2.New
  name.vb: New
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Double[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double[]
  nameWithType: double[]
  fullName: double[]
  nameWithType.vb: Double()
  fullName.vb: Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: (
  - name: )
- uid: netDxf.Vector2.Zero*
  commentId: Overload:netDxf.Vector2.Zero
  href: netDxf.Vector2.html#netDxf_Vector2_Zero
  name: Zero
  nameWithType: Vector2.Zero
  fullName: netDxf.Vector2.Zero
- uid: netDxf.Vector2
  commentId: T:netDxf.Vector2
  parent: netDxf
  href: netDxf.Vector2.html
  name: Vector2
  nameWithType: Vector2
  fullName: netDxf.Vector2
- uid: netDxf.Vector2.UnitX*
  commentId: Overload:netDxf.Vector2.UnitX
  href: netDxf.Vector2.html#netDxf_Vector2_UnitX
  name: UnitX
  nameWithType: Vector2.UnitX
  fullName: netDxf.Vector2.UnitX
- uid: netDxf.Vector2.UnitY*
  commentId: Overload:netDxf.Vector2.UnitY
  href: netDxf.Vector2.html#netDxf_Vector2_UnitY
  name: UnitY
  nameWithType: Vector2.UnitY
  fullName: netDxf.Vector2.UnitY
- uid: netDxf.Vector2.NaN*
  commentId: Overload:netDxf.Vector2.NaN
  href: netDxf.Vector2.html#netDxf_Vector2_NaN
  name: NaN
  nameWithType: Vector2.NaN
  fullName: netDxf.Vector2.NaN
- uid: netDxf.Vector2.X*
  commentId: Overload:netDxf.Vector2.X
  href: netDxf.Vector2.html#netDxf_Vector2_X
  name: X
  nameWithType: Vector2.X
  fullName: netDxf.Vector2.X
- uid: netDxf.Vector2.Y*
  commentId: Overload:netDxf.Vector2.Y
  href: netDxf.Vector2.html#netDxf_Vector2_Y
  name: Y
  nameWithType: Vector2.Y
  fullName: netDxf.Vector2.Y
- uid: netDxf.Vector2.Item*
  commentId: Overload:netDxf.Vector2.Item
  href: netDxf.Vector2.html#netDxf_Vector2_Item_System_Int32_
  name: this
  nameWithType: Vector2.this
  fullName: netDxf.Vector2.this
  nameWithType.vb: Vector2.this[]
  fullName.vb: netDxf.Vector2.this[]
  name.vb: this[]
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: netDxf.Vector2.IsNormalized*
  commentId: Overload:netDxf.Vector2.IsNormalized
  href: netDxf.Vector2.html#netDxf_Vector2_IsNormalized
  name: IsNormalized
  nameWithType: Vector2.IsNormalized
  fullName: netDxf.Vector2.IsNormalized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Double.NaN
  commentId: F:System.Double.NaN
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double.nan
  name: NaN
  nameWithType: double.NaN
  fullName: double.NaN
  nameWithType.vb: Double.NaN
  fullName.vb: Double.NaN
- uid: netDxf.Vector2.IsNaN*
  commentId: Overload:netDxf.Vector2.IsNaN
  href: netDxf.Vector2.html#netDxf_Vector2_IsNaN_netDxf_Vector2_
  name: IsNaN
  nameWithType: Vector2.IsNaN
  fullName: netDxf.Vector2.IsNaN
- uid: netDxf.Vector2.IsZero*
  commentId: Overload:netDxf.Vector2.IsZero
  href: netDxf.Vector2.html#netDxf_Vector2_IsZero_netDxf_Vector2_
  name: IsZero
  nameWithType: Vector2.IsZero
  fullName: netDxf.Vector2.IsZero
- uid: netDxf.Vector2.DotProduct*
  commentId: Overload:netDxf.Vector2.DotProduct
  href: netDxf.Vector2.html#netDxf_Vector2_DotProduct_netDxf_Vector2_netDxf_Vector2_
  name: DotProduct
  nameWithType: Vector2.DotProduct
  fullName: netDxf.Vector2.DotProduct
- uid: netDxf.Vector2.CrossProduct*
  commentId: Overload:netDxf.Vector2.CrossProduct
  href: netDxf.Vector2.html#netDxf_Vector2_CrossProduct_netDxf_Vector2_netDxf_Vector2_
  name: CrossProduct
  nameWithType: Vector2.CrossProduct
  fullName: netDxf.Vector2.CrossProduct
- uid: netDxf.Vector2.Perpendicular*
  commentId: Overload:netDxf.Vector2.Perpendicular
  href: netDxf.Vector2.html#netDxf_Vector2_Perpendicular_netDxf_Vector2_
  name: Perpendicular
  nameWithType: Vector2.Perpendicular
  fullName: netDxf.Vector2.Perpendicular
- uid: netDxf.Vector2.Rotate*
  commentId: Overload:netDxf.Vector2.Rotate
  href: netDxf.Vector2.html#netDxf_Vector2_Rotate_netDxf_Vector2_System_Double_
  name: Rotate
  nameWithType: Vector2.Rotate
  fullName: netDxf.Vector2.Rotate
- uid: netDxf.Vector2.Polar*
  commentId: Overload:netDxf.Vector2.Polar
  href: netDxf.Vector2.html#netDxf_Vector2_Polar_netDxf_Vector2_System_Double_System_Double_
  name: Polar
  nameWithType: Vector2.Polar
  fullName: netDxf.Vector2.Polar
- uid: netDxf.Vector2.SquareDistance*
  commentId: Overload:netDxf.Vector2.SquareDistance
  href: netDxf.Vector2.html#netDxf_Vector2_SquareDistance_netDxf_Vector2_netDxf_Vector2_
  name: SquareDistance
  nameWithType: Vector2.SquareDistance
  fullName: netDxf.Vector2.SquareDistance
- uid: netDxf.Vector2.Distance*
  commentId: Overload:netDxf.Vector2.Distance
  href: netDxf.Vector2.html#netDxf_Vector2_Distance_netDxf_Vector2_netDxf_Vector2_
  name: Distance
  nameWithType: Vector2.Distance
  fullName: netDxf.Vector2.Distance
- uid: netDxf.Vector2.Angle*
  commentId: Overload:netDxf.Vector2.Angle
  href: netDxf.Vector2.html#netDxf_Vector2_Angle_netDxf_Vector2_
  name: Angle
  nameWithType: Vector2.Angle
  fullName: netDxf.Vector2.Angle
- uid: netDxf.Vector2.AngleBetween*
  commentId: Overload:netDxf.Vector2.AngleBetween
  href: netDxf.Vector2.html#netDxf_Vector2_AngleBetween_netDxf_Vector2_netDxf_Vector2_
  name: AngleBetween
  nameWithType: Vector2.AngleBetween
  fullName: netDxf.Vector2.AngleBetween
- uid: netDxf.Vector2.MidPoint*
  commentId: Overload:netDxf.Vector2.MidPoint
  href: netDxf.Vector2.html#netDxf_Vector2_MidPoint_netDxf_Vector2_netDxf_Vector2_
  name: MidPoint
  nameWithType: Vector2.MidPoint
  fullName: netDxf.Vector2.MidPoint
- uid: netDxf.Vector2.ArePerpendicular*
  commentId: Overload:netDxf.Vector2.ArePerpendicular
  href: netDxf.Vector2.html#netDxf_Vector2_ArePerpendicular_netDxf_Vector2_netDxf_Vector2_
  name: ArePerpendicular
  nameWithType: Vector2.ArePerpendicular
  fullName: netDxf.Vector2.ArePerpendicular
- uid: netDxf.Vector2.AreParallel*
  commentId: Overload:netDxf.Vector2.AreParallel
  href: netDxf.Vector2.html#netDxf_Vector2_AreParallel_netDxf_Vector2_netDxf_Vector2_
  name: AreParallel
  nameWithType: Vector2.AreParallel
  fullName: netDxf.Vector2.AreParallel
- uid: netDxf.Vector2.Round*
  commentId: Overload:netDxf.Vector2.Round
  href: netDxf.Vector2.html#netDxf_Vector2_Round_netDxf_Vector2_System_Int32_
  name: Round
  nameWithType: Vector2.Round
  fullName: netDxf.Vector2.Round
- uid: netDxf.Vector2.Normalize*
  commentId: Overload:netDxf.Vector2.Normalize
  href: netDxf.Vector2.html#netDxf_Vector2_Normalize_netDxf_Vector2_
  name: Normalize
  nameWithType: Vector2.Normalize
  fullName: netDxf.Vector2.Normalize
- uid: netDxf.Vector2.op_Equality*
  commentId: Overload:netDxf.Vector2.op_Equality
  href: netDxf.Vector2.html#netDxf_Vector2_op_Equality_netDxf_Vector2_netDxf_Vector2_
  name: operator ==
  nameWithType: Vector2.operator ==
  fullName: netDxf.Vector2.operator ==
  nameWithType.vb: Vector2.=
  fullName.vb: netDxf.Vector2.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector2.op_Equality*
    name: ==
    href: netDxf.Vector2.html#netDxf_Vector2_op_Equality_netDxf_Vector2_netDxf_Vector2_
- uid: netDxf.Vector2.op_Inequality*
  commentId: Overload:netDxf.Vector2.op_Inequality
  href: netDxf.Vector2.html#netDxf_Vector2_op_Inequality_netDxf_Vector2_netDxf_Vector2_
  name: operator !=
  nameWithType: Vector2.operator !=
  fullName: netDxf.Vector2.operator !=
  nameWithType.vb: Vector2.<>
  fullName.vb: netDxf.Vector2.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector2.op_Inequality*
    name: '!='
    href: netDxf.Vector2.html#netDxf_Vector2_op_Inequality_netDxf_Vector2_netDxf_Vector2_
- uid: netDxf.Vector2.op_Addition*
  commentId: Overload:netDxf.Vector2.op_Addition
  href: netDxf.Vector2.html#netDxf_Vector2_op_Addition_netDxf_Vector2_netDxf_Vector2_
  name: operator +
  nameWithType: Vector2.operator +
  fullName: netDxf.Vector2.operator +
  nameWithType.vb: Vector2.+
  fullName.vb: netDxf.Vector2.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector2.op_Addition*
    name: +
    href: netDxf.Vector2.html#netDxf_Vector2_op_Addition_netDxf_Vector2_netDxf_Vector2_
- uid: netDxf.Vector2.Add*
  commentId: Overload:netDxf.Vector2.Add
  href: netDxf.Vector2.html#netDxf_Vector2_Add_netDxf_Vector2_netDxf_Vector2_
  name: Add
  nameWithType: Vector2.Add
  fullName: netDxf.Vector2.Add
- uid: netDxf.Vector2.op_Subtraction*
  commentId: Overload:netDxf.Vector2.op_Subtraction
  href: netDxf.Vector2.html#netDxf_Vector2_op_Subtraction_netDxf_Vector2_netDxf_Vector2_
  name: operator -
  nameWithType: Vector2.operator -
  fullName: netDxf.Vector2.operator -
  nameWithType.vb: Vector2.-
  fullName.vb: netDxf.Vector2.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector2.op_Subtraction*
    name: '-'
    href: netDxf.Vector2.html#netDxf_Vector2_op_Subtraction_netDxf_Vector2_netDxf_Vector2_
- uid: netDxf.Vector2.Subtract*
  commentId: Overload:netDxf.Vector2.Subtract
  href: netDxf.Vector2.html#netDxf_Vector2_Subtract_netDxf_Vector2_netDxf_Vector2_
  name: Subtract
  nameWithType: Vector2.Subtract
  fullName: netDxf.Vector2.Subtract
- uid: netDxf.Vector2.op_UnaryNegation*
  commentId: Overload:netDxf.Vector2.op_UnaryNegation
  href: netDxf.Vector2.html#netDxf_Vector2_op_UnaryNegation_netDxf_Vector2_
  name: operator -
  nameWithType: Vector2.operator -
  fullName: netDxf.Vector2.operator -
  nameWithType.vb: Vector2.-
  fullName.vb: netDxf.Vector2.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector2.op_UnaryNegation*
    name: '-'
    href: netDxf.Vector2.html#netDxf_Vector2_op_UnaryNegation_netDxf_Vector2_
- uid: netDxf.Vector2.Negate*
  commentId: Overload:netDxf.Vector2.Negate
  href: netDxf.Vector2.html#netDxf_Vector2_Negate_netDxf_Vector2_
  name: Negate
  nameWithType: Vector2.Negate
  fullName: netDxf.Vector2.Negate
- uid: netDxf.Vector2.op_Multiply*
  commentId: Overload:netDxf.Vector2.op_Multiply
  href: netDxf.Vector2.html#netDxf_Vector2_op_Multiply_netDxf_Vector2_System_Double_
  name: operator *
  nameWithType: Vector2.operator *
  fullName: netDxf.Vector2.operator *
  nameWithType.vb: Vector2.*
  fullName.vb: netDxf.Vector2.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector2.op_Multiply*
    name: '*'
    href: netDxf.Vector2.html#netDxf_Vector2_op_Multiply_netDxf_Vector2_System_Double_
- uid: netDxf.Vector2.Multiply*
  commentId: Overload:netDxf.Vector2.Multiply
  href: netDxf.Vector2.html#netDxf_Vector2_Multiply_netDxf_Vector2_System_Double_
  name: Multiply
  nameWithType: Vector2.Multiply
  fullName: netDxf.Vector2.Multiply
- uid: netDxf.Vector2.op_Division*
  commentId: Overload:netDxf.Vector2.op_Division
  href: netDxf.Vector2.html#netDxf_Vector2_op_Division_netDxf_Vector2_System_Double_
  name: operator /
  nameWithType: Vector2.operator /
  fullName: netDxf.Vector2.operator /
  nameWithType.vb: Vector2./
  fullName.vb: netDxf.Vector2./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector2.op_Division*
    name: /
    href: netDxf.Vector2.html#netDxf_Vector2_op_Division_netDxf_Vector2_System_Double_
- uid: netDxf.Vector2.Divide*
  commentId: Overload:netDxf.Vector2.Divide
  href: netDxf.Vector2.html#netDxf_Vector2_Divide_netDxf_Vector2_System_Double_
  name: Divide
  nameWithType: Vector2.Divide
  fullName: netDxf.Vector2.Divide
- uid: netDxf.Vector2.Modulus*
  commentId: Overload:netDxf.Vector2.Modulus
  href: netDxf.Vector2.html#netDxf_Vector2_Modulus
  name: Modulus
  nameWithType: Vector2.Modulus
  fullName: netDxf.Vector2.Modulus
- uid: netDxf.Vector2.ToArray*
  commentId: Overload:netDxf.Vector2.ToArray
  href: netDxf.Vector2.html#netDxf_Vector2_ToArray
  name: ToArray
  nameWithType: Vector2.ToArray
  fullName: netDxf.Vector2.ToArray
- uid: netDxf.Vector2.Equals*
  commentId: Overload:netDxf.Vector2.Equals
  href: netDxf.Vector2.html#netDxf_Vector2_Equals_netDxf_Vector2_netDxf_Vector2_
  name: Equals
  nameWithType: Vector2.Equals
  fullName: netDxf.Vector2.Equals
- uid: System.IEquatable{netDxf.Vector2}.Equals(netDxf.Vector2)
  commentId: M:System.IEquatable{netDxf.Vector2}.Equals(netDxf.Vector2)
  parent: System.IEquatable{netDxf.Vector2}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Vector2)
  nameWithType: IEquatable<Vector2>.Equals(Vector2)
  fullName: System.IEquatable<netDxf.Vector2>.Equals(netDxf.Vector2)
  nameWithType.vb: IEquatable(Of Vector2).Equals(Vector2)
  fullName.vb: System.IEquatable(Of netDxf.Vector2).Equals(netDxf.Vector2)
  spec.csharp:
  - uid: System.IEquatable{netDxf.Vector2}.Equals(netDxf.Vector2)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: netDxf.Vector2
    name: Vector2
    href: netDxf.Vector2.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{netDxf.Vector2}.Equals(netDxf.Vector2)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: netDxf.Vector2
    name: Vector2
    href: netDxf.Vector2.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: netDxf.Vector2.GetHashCode*
  commentId: Overload:netDxf.Vector2.GetHashCode
  href: netDxf.Vector2.html#netDxf_Vector2_GetHashCode
  name: GetHashCode
  nameWithType: Vector2.GetHashCode
  fullName: netDxf.Vector2.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: netDxf.Vector2.ToString*
  commentId: Overload:netDxf.Vector2.ToString
  href: netDxf.Vector2.html#netDxf_Vector2_ToString
  name: ToString
  nameWithType: Vector2.ToString
  fullName: netDxf.Vector2.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
