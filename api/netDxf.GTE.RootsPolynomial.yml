### YamlMime:ManagedReference
items:
- uid: netDxf.GTE.RootsPolynomial
  commentId: T:netDxf.GTE.RootsPolynomial
  id: RootsPolynomial
  parent: netDxf.GTE
  children:
  - netDxf.GTE.RootsPolynomial.Find(System.Int32,System.Double[],System.Double,System.Double,System.Int32,System.Double@)
  - netDxf.GTE.RootsPolynomial.Find(System.Int32,System.Double[],System.Int32,System.Double[]@)
  - netDxf.GTE.RootsPolynomial.GetRootInfoCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  - netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  - netDxf.GTE.RootsPolynomial.GetRootInfoQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  - netDxf.GTE.RootsPolynomial.SolveCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  - netDxf.GTE.RootsPolynomial.SolveQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  - netDxf.GTE.RootsPolynomial.SolveQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  langs:
  - csharp
  - vb
  name: RootsPolynomial
  nameWithType: RootsPolynomial
  fullName: netDxf.GTE.RootsPolynomial
  type: Class
  source:
    id: RootsPolynomial
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 79
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static class RootsPolynomial
    content.vb: Public Module RootsPolynomial
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: netDxf.GTE.RootsPolynomial.SolveQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  commentId: M:netDxf.GTE.RootsPolynomial.SolveQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  id: SolveQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: SolveQuadratic(double, double, double, out SortedDictionary<double, int>)
  nameWithType: RootsPolynomial.SolveQuadratic(double, double, double, out SortedDictionary<double, int>)
  fullName: netDxf.GTE.RootsPolynomial.SolveQuadratic(double, double, double, out System.Collections.Generic.SortedDictionary<double, int>)
  type: Method
  source:
    id: SolveQuadratic
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 92
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static void SolveQuadratic(double p0, double p1, double p2, out SortedDictionary<double, int> rmMap)
    parameters:
    - id: p0
      type: System.Double
    - id: p1
      type: System.Double
    - id: p2
      type: System.Double
    - id: rmMap
      type: System.Collections.Generic.SortedDictionary{System.Double,System.Int32}
    content.vb: Public Shared Sub SolveQuadratic(p0 As Double, p1 As Double, p2 As Double, rmMap As SortedDictionary(Of Double, Integer))
  overload: netDxf.GTE.RootsPolynomial.SolveQuadratic*
  nameWithType.vb: RootsPolynomial.SolveQuadratic(Double, Double, Double, SortedDictionary(Of Double, Integer))
  fullName.vb: netDxf.GTE.RootsPolynomial.SolveQuadratic(Double, Double, Double, System.Collections.Generic.SortedDictionary(Of Double, Integer))
  name.vb: SolveQuadratic(Double, Double, Double, SortedDictionary(Of Double, Integer))
- uid: netDxf.GTE.RootsPolynomial.SolveCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  commentId: M:netDxf.GTE.RootsPolynomial.SolveCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  id: SolveCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: SolveCubic(double, double, double, double, out SortedDictionary<double, int>)
  nameWithType: RootsPolynomial.SolveCubic(double, double, double, double, out SortedDictionary<double, int>)
  fullName: netDxf.GTE.RootsPolynomial.SolveCubic(double, double, double, double, out System.Collections.Generic.SortedDictionary<double, int>)
  type: Method
  source:
    id: SolveCubic
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 111
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static void SolveCubic(double p0, double p1, double p2, double p3, out SortedDictionary<double, int> rmMap)
    parameters:
    - id: p0
      type: System.Double
    - id: p1
      type: System.Double
    - id: p2
      type: System.Double
    - id: p3
      type: System.Double
    - id: rmMap
      type: System.Collections.Generic.SortedDictionary{System.Double,System.Int32}
    content.vb: Public Shared Sub SolveCubic(p0 As Double, p1 As Double, p2 As Double, p3 As Double, rmMap As SortedDictionary(Of Double, Integer))
  overload: netDxf.GTE.RootsPolynomial.SolveCubic*
  nameWithType.vb: RootsPolynomial.SolveCubic(Double, Double, Double, Double, SortedDictionary(Of Double, Integer))
  fullName.vb: netDxf.GTE.RootsPolynomial.SolveCubic(Double, Double, Double, Double, System.Collections.Generic.SortedDictionary(Of Double, Integer))
  name.vb: SolveCubic(Double, Double, Double, Double, SortedDictionary(Of Double, Integer))
- uid: netDxf.GTE.RootsPolynomial.SolveQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  commentId: M:netDxf.GTE.RootsPolynomial.SolveQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  id: SolveQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.SortedDictionary{System.Double,System.Int32}@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: SolveQuartic(double, double, double, double, double, out SortedDictionary<double, int>)
  nameWithType: RootsPolynomial.SolveQuartic(double, double, double, double, double, out SortedDictionary<double, int>)
  fullName: netDxf.GTE.RootsPolynomial.SolveQuartic(double, double, double, double, double, out System.Collections.Generic.SortedDictionary<double, int>)
  type: Method
  source:
    id: SolveQuartic
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 132
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static void SolveQuartic(double p0, double p1, double p2, double p3, double p4, out SortedDictionary<double, int> rmMap)
    parameters:
    - id: p0
      type: System.Double
    - id: p1
      type: System.Double
    - id: p2
      type: System.Double
    - id: p3
      type: System.Double
    - id: p4
      type: System.Double
    - id: rmMap
      type: System.Collections.Generic.SortedDictionary{System.Double,System.Int32}
    content.vb: Public Shared Sub SolveQuartic(p0 As Double, p1 As Double, p2 As Double, p3 As Double, p4 As Double, rmMap As SortedDictionary(Of Double, Integer))
  overload: netDxf.GTE.RootsPolynomial.SolveQuartic*
  nameWithType.vb: RootsPolynomial.SolveQuartic(Double, Double, Double, Double, Double, SortedDictionary(Of Double, Integer))
  fullName.vb: netDxf.GTE.RootsPolynomial.SolveQuartic(Double, Double, Double, Double, Double, System.Collections.Generic.SortedDictionary(Of Double, Integer))
  name.vb: SolveQuartic(Double, Double, Double, Double, Double, SortedDictionary(Of Double, Integer))
- uid: netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  commentId: M:netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  id: GetRootInfoQuadratic(System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: GetRootInfoQuadratic(double, double, double, out List<int>)
  nameWithType: RootsPolynomial.GetRootInfoQuadratic(double, double, double, out List<int>)
  fullName: netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic(double, double, double, out System.Collections.Generic.List<int>)
  type: Method
  source:
    id: GetRootInfoQuadratic
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 159
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static void GetRootInfoQuadratic(double p0, double p1, double p2, out List<int> info)
    parameters:
    - id: p0
      type: System.Double
    - id: p1
      type: System.Double
    - id: p2
      type: System.Double
    - id: info
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public Shared Sub GetRootInfoQuadratic(p0 As Double, p1 As Double, p2 As Double, info As List(Of Integer))
  overload: netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic*
  nameWithType.vb: RootsPolynomial.GetRootInfoQuadratic(Double, Double, Double, List(Of Integer))
  fullName.vb: netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic(Double, Double, Double, System.Collections.Generic.List(Of Integer))
  name.vb: GetRootInfoQuadratic(Double, Double, Double, List(Of Integer))
- uid: netDxf.GTE.RootsPolynomial.GetRootInfoCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  commentId: M:netDxf.GTE.RootsPolynomial.GetRootInfoCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  id: GetRootInfoCubic(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: GetRootInfoCubic(double, double, double, double, out List<int>)
  nameWithType: RootsPolynomial.GetRootInfoCubic(double, double, double, double, out List<int>)
  fullName: netDxf.GTE.RootsPolynomial.GetRootInfoCubic(double, double, double, double, out System.Collections.Generic.List<int>)
  type: Method
  source:
    id: GetRootInfoCubic
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 171
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static void GetRootInfoCubic(double p0, double p1, double p2, double p3, out List<int> info)
    parameters:
    - id: p0
      type: System.Double
    - id: p1
      type: System.Double
    - id: p2
      type: System.Double
    - id: p3
      type: System.Double
    - id: info
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public Shared Sub GetRootInfoCubic(p0 As Double, p1 As Double, p2 As Double, p3 As Double, info As List(Of Integer))
  overload: netDxf.GTE.RootsPolynomial.GetRootInfoCubic*
  nameWithType.vb: RootsPolynomial.GetRootInfoCubic(Double, Double, Double, Double, List(Of Integer))
  fullName.vb: netDxf.GTE.RootsPolynomial.GetRootInfoCubic(Double, Double, Double, Double, System.Collections.Generic.List(Of Integer))
  name.vb: GetRootInfoCubic(Double, Double, Double, Double, List(Of Integer))
- uid: netDxf.GTE.RootsPolynomial.GetRootInfoQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  commentId: M:netDxf.GTE.RootsPolynomial.GetRootInfoQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  id: GetRootInfoQuartic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Int32}@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: GetRootInfoQuartic(double, double, double, double, double, out List<int>)
  nameWithType: RootsPolynomial.GetRootInfoQuartic(double, double, double, double, double, out List<int>)
  fullName: netDxf.GTE.RootsPolynomial.GetRootInfoQuartic(double, double, double, double, double, out System.Collections.Generic.List<int>)
  type: Method
  source:
    id: GetRootInfoQuartic
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 185
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static void GetRootInfoQuartic(double p0, double p1, double p2, double p3, double p4, out List<int> info)
    parameters:
    - id: p0
      type: System.Double
    - id: p1
      type: System.Double
    - id: p2
      type: System.Double
    - id: p3
      type: System.Double
    - id: p4
      type: System.Double
    - id: info
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public Shared Sub GetRootInfoQuartic(p0 As Double, p1 As Double, p2 As Double, p3 As Double, p4 As Double, info As List(Of Integer))
  overload: netDxf.GTE.RootsPolynomial.GetRootInfoQuartic*
  nameWithType.vb: RootsPolynomial.GetRootInfoQuartic(Double, Double, Double, Double, Double, List(Of Integer))
  fullName.vb: netDxf.GTE.RootsPolynomial.GetRootInfoQuartic(Double, Double, Double, Double, Double, System.Collections.Generic.List(Of Integer))
  name.vb: GetRootInfoQuartic(Double, Double, Double, Double, Double, List(Of Integer))
- uid: netDxf.GTE.RootsPolynomial.Find(System.Int32,System.Double[],System.Int32,System.Double[]@)
  commentId: M:netDxf.GTE.RootsPolynomial.Find(System.Int32,System.Double[],System.Int32,System.Double[]@)
  id: Find(System.Int32,System.Double[],System.Int32,System.Double[]@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: Find(int, double[], int, out double[])
  nameWithType: RootsPolynomial.Find(int, double[], int, out double[])
  fullName: netDxf.GTE.RootsPolynomial.Find(int, double[], int, out double[])
  type: Method
  source:
    id: Find
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 207
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static int Find(int degree, double[] c, int maxIterations, out double[] roots)
    parameters:
    - id: degree
      type: System.Int32
    - id: c
      type: System.Double[]
    - id: maxIterations
      type: System.Int32
    - id: roots
      type: System.Double[]
    return:
      type: System.Int32
    content.vb: Public Shared Function Find(degree As Integer, c As Double(), maxIterations As Integer, roots As Double()) As Integer
  overload: netDxf.GTE.RootsPolynomial.Find*
  nameWithType.vb: RootsPolynomial.Find(Integer, Double(), Integer, Double())
  fullName.vb: netDxf.GTE.RootsPolynomial.Find(Integer, Double(), Integer, Double())
  name.vb: Find(Integer, Double(), Integer, Double())
- uid: netDxf.GTE.RootsPolynomial.Find(System.Int32,System.Double[],System.Double,System.Double,System.Int32,System.Double@)
  commentId: M:netDxf.GTE.RootsPolynomial.Find(System.Int32,System.Double[],System.Double,System.Double,System.Int32,System.Double@)
  id: Find(System.Int32,System.Double[],System.Double,System.Double,System.Int32,System.Double@)
  parent: netDxf.GTE.RootsPolynomial
  langs:
  - csharp
  - vb
  name: Find(int, double[], double, double, int, out double)
  nameWithType: RootsPolynomial.Find(int, double[], double, double, int, out double)
  fullName: netDxf.GTE.RootsPolynomial.Find(int, double[], double, double, int, out double)
  type: Method
  source:
    id: Find
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/RootsPolynominal.cs
    startLine: 255
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool Find(int degree, double[] c, double tmin, double tmax, int maxIterations, out double root)
    parameters:
    - id: degree
      type: System.Int32
    - id: c
      type: System.Double[]
    - id: tmin
      type: System.Double
    - id: tmax
      type: System.Double
    - id: maxIterations
      type: System.Int32
    - id: root
      type: System.Double
    return:
      type: System.Boolean
    content.vb: Public Shared Function Find(degree As Integer, c As Double(), tmin As Double, tmax As Double, maxIterations As Integer, root As Double) As Boolean
  overload: netDxf.GTE.RootsPolynomial.Find*
  nameWithType.vb: RootsPolynomial.Find(Integer, Double(), Double, Double, Integer, Double)
  fullName.vb: netDxf.GTE.RootsPolynomial.Find(Integer, Double(), Double, Double, Integer, Double)
  name.vb: Find(Integer, Double(), Double, Double, Integer, Double)
references:
- uid: netDxf.GTE
  commentId: N:netDxf.GTE
  href: netDxf.html
  name: netDxf.GTE
  nameWithType: netDxf.GTE
  fullName: netDxf.GTE
  spec.csharp:
  - uid: netDxf
    name: netDxf
    href: netDxf.html
  - name: .
  - uid: netDxf.GTE
    name: GTE
    href: netDxf.GTE.html
  spec.vb:
  - uid: netDxf
    name: netDxf
    href: netDxf.html
  - name: .
  - uid: netDxf.GTE
    name: GTE
    href: netDxf.GTE.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: netDxf.GTE.RootsPolynomial.SolveQuadratic*
  commentId: Overload:netDxf.GTE.RootsPolynomial.SolveQuadratic
  href: netDxf.GTE.RootsPolynomial.html#netDxf_GTE_RootsPolynomial_SolveQuadratic_System_Double_System_Double_System_Double_System_Collections_Generic_SortedDictionary_System_Double_System_Int32___
  name: SolveQuadratic
  nameWithType: RootsPolynomial.SolveQuadratic
  fullName: netDxf.GTE.RootsPolynomial.SolveQuadratic
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Collections.Generic.SortedDictionary{System.Double,System.Int32}
  commentId: T:System.Collections.Generic.SortedDictionary{System.Double,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sorteddictionary-2
  name: SortedDictionary<double, int>
  nameWithType: SortedDictionary<double, int>
  fullName: System.Collections.Generic.SortedDictionary<double, int>
  nameWithType.vb: SortedDictionary(Of Double, Integer)
  fullName.vb: System.Collections.Generic.SortedDictionary(Of Double, Integer)
  name.vb: SortedDictionary(Of Double, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sorteddictionary-2
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sorteddictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.SortedDictionary`2
  commentId: T:System.Collections.Generic.SortedDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sorteddictionary-2
  name: SortedDictionary<TKey, TValue>
  nameWithType: SortedDictionary<TKey, TValue>
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>
  nameWithType.vb: SortedDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue)
  name.vb: SortedDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sorteddictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2
    name: SortedDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.sorteddictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: netDxf.GTE.RootsPolynomial.SolveCubic*
  commentId: Overload:netDxf.GTE.RootsPolynomial.SolveCubic
  href: netDxf.GTE.RootsPolynomial.html#netDxf_GTE_RootsPolynomial_SolveCubic_System_Double_System_Double_System_Double_System_Double_System_Collections_Generic_SortedDictionary_System_Double_System_Int32___
  name: SolveCubic
  nameWithType: RootsPolynomial.SolveCubic
  fullName: netDxf.GTE.RootsPolynomial.SolveCubic
- uid: netDxf.GTE.RootsPolynomial.SolveQuartic*
  commentId: Overload:netDxf.GTE.RootsPolynomial.SolveQuartic
  href: netDxf.GTE.RootsPolynomial.html#netDxf_GTE_RootsPolynomial_SolveQuartic_System_Double_System_Double_System_Double_System_Double_System_Double_System_Collections_Generic_SortedDictionary_System_Double_System_Int32___
  name: SolveQuartic
  nameWithType: RootsPolynomial.SolveQuartic
  fullName: netDxf.GTE.RootsPolynomial.SolveQuartic
- uid: netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic*
  commentId: Overload:netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic
  href: netDxf.GTE.RootsPolynomial.html#netDxf_GTE_RootsPolynomial_GetRootInfoQuadratic_System_Double_System_Double_System_Double_System_Collections_Generic_List_System_Int32___
  name: GetRootInfoQuadratic
  nameWithType: RootsPolynomial.GetRootInfoQuadratic
  fullName: netDxf.GTE.RootsPolynomial.GetRootInfoQuadratic
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<int>
  nameWithType: List<int>
  fullName: System.Collections.Generic.List<int>
  nameWithType.vb: List(Of Integer)
  fullName.vb: System.Collections.Generic.List(Of Integer)
  name.vb: List(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: netDxf.GTE.RootsPolynomial.GetRootInfoCubic*
  commentId: Overload:netDxf.GTE.RootsPolynomial.GetRootInfoCubic
  href: netDxf.GTE.RootsPolynomial.html#netDxf_GTE_RootsPolynomial_GetRootInfoCubic_System_Double_System_Double_System_Double_System_Double_System_Collections_Generic_List_System_Int32___
  name: GetRootInfoCubic
  nameWithType: RootsPolynomial.GetRootInfoCubic
  fullName: netDxf.GTE.RootsPolynomial.GetRootInfoCubic
- uid: netDxf.GTE.RootsPolynomial.GetRootInfoQuartic*
  commentId: Overload:netDxf.GTE.RootsPolynomial.GetRootInfoQuartic
  href: netDxf.GTE.RootsPolynomial.html#netDxf_GTE_RootsPolynomial_GetRootInfoQuartic_System_Double_System_Double_System_Double_System_Double_System_Double_System_Collections_Generic_List_System_Int32___
  name: GetRootInfoQuartic
  nameWithType: RootsPolynomial.GetRootInfoQuartic
  fullName: netDxf.GTE.RootsPolynomial.GetRootInfoQuartic
- uid: netDxf.GTE.RootsPolynomial.Find*
  commentId: Overload:netDxf.GTE.RootsPolynomial.Find
  href: netDxf.GTE.RootsPolynomial.html#netDxf_GTE_RootsPolynomial_Find_System_Int32_System_Double___System_Int32_System_Double____
  name: Find
  nameWithType: RootsPolynomial.Find
  fullName: netDxf.GTE.RootsPolynomial.Find
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Double[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double[]
  nameWithType: double[]
  fullName: double[]
  nameWithType.vb: Double()
  fullName.vb: Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
