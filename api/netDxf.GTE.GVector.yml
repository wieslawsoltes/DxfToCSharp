### YamlMime:ManagedReference
items:
- uid: netDxf.GTE.GVector
  commentId: T:netDxf.GTE.GVector
  id: GVector
  parent: netDxf.GTE
  children:
  - netDxf.GTE.GVector.#ctor(System.Double[])
  - netDxf.GTE.GVector.#ctor(System.Int32)
  - netDxf.GTE.GVector.#ctor(System.Int32,System.Int32)
  - netDxf.GTE.GVector.ComputeExtremes(System.Int32,netDxf.GTE.GVector[],netDxf.GTE.GVector@,netDxf.GTE.GVector@)
  - netDxf.GTE.GVector.Dot(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.Equals(System.Object)
  - netDxf.GTE.GVector.Equals(netDxf.GTE.GVector)
  - netDxf.GTE.GVector.GetHashCode
  - netDxf.GTE.GVector.HLift(netDxf.GTE.GVector,System.Double)
  - netDxf.GTE.GVector.HProject(netDxf.GTE.GVector)
  - netDxf.GTE.GVector.Item(System.Int32)
  - netDxf.GTE.GVector.Length(netDxf.GTE.GVector,System.Boolean)
  - netDxf.GTE.GVector.Lift(netDxf.GTE.GVector,System.Int32,System.Double)
  - netDxf.GTE.GVector.MakeUnit(System.Int32)
  - netDxf.GTE.GVector.MakeZero
  - netDxf.GTE.GVector.Normalize(netDxf.GTE.GVector@,System.Boolean)
  - netDxf.GTE.GVector.Orthonormalize(System.Int32,netDxf.GTE.GVector[]@,System.Boolean)
  - netDxf.GTE.GVector.Project(netDxf.GTE.GVector,System.Int32)
  - netDxf.GTE.GVector.Size
  - netDxf.GTE.GVector.Unit(System.Int32,System.Int32)
  - netDxf.GTE.GVector.Vector
  - netDxf.GTE.GVector.Zero(System.Int32)
  - netDxf.GTE.GVector.op_Addition(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_Division(netDxf.GTE.GVector,System.Double)
  - netDxf.GTE.GVector.op_Equality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_GreaterThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_GreaterThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_Inequality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_LessThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_LessThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_Multiply(System.Double,netDxf.GTE.GVector)
  - netDxf.GTE.GVector.op_Multiply(netDxf.GTE.GVector,System.Double)
  - netDxf.GTE.GVector.op_Subtraction(netDxf.GTE.GVector,netDxf.GTE.GVector)
  langs:
  - csharp
  - vb
  name: GVector
  nameWithType: GVector
  fullName: netDxf.GTE.GVector
  type: Class
  source:
    id: GVector
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 39
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: 'public class GVector : IEquatable<GVector>'
    content.vb: Public Class GVector Implements IEquatable(Of GVector)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{netDxf.GTE.GVector}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: netDxf.GTE.GVector.#ctor(System.Int32)
  commentId: M:netDxf.GTE.GVector.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: GVector(int)
  nameWithType: GVector.GVector(int)
  fullName: netDxf.GTE.GVector.GVector(int)
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 51
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public GVector(int size)
    parameters:
    - id: size
      type: System.Int32
    content.vb: Public Sub New(size As Integer)
  overload: netDxf.GTE.GVector.#ctor*
  nameWithType.vb: GVector.New(Integer)
  fullName.vb: netDxf.GTE.GVector.New(Integer)
  name.vb: New(Integer)
- uid: netDxf.GTE.GVector.#ctor(System.Int32,System.Int32)
  commentId: M:netDxf.GTE.GVector.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: GVector(int, int)
  nameWithType: GVector.GVector(int, int)
  fullName: netDxf.GTE.GVector.GVector(int, int)
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 60
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public GVector(int size, int d)
    parameters:
    - id: size
      type: System.Int32
    - id: d
      type: System.Int32
    content.vb: Public Sub New(size As Integer, d As Integer)
  overload: netDxf.GTE.GVector.#ctor*
  nameWithType.vb: GVector.New(Integer, Integer)
  fullName.vb: netDxf.GTE.GVector.New(Integer, Integer)
  name.vb: New(Integer, Integer)
- uid: netDxf.GTE.GVector.#ctor(System.Double[])
  commentId: M:netDxf.GTE.GVector.#ctor(System.Double[])
  id: '#ctor(System.Double[])'
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: GVector(double[])
  nameWithType: GVector.GVector(double[])
  fullName: netDxf.GTE.GVector.GVector(double[])
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 66
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public GVector(double[] elements)
    parameters:
    - id: elements
      type: System.Double[]
    content.vb: Public Sub New(elements As Double())
  overload: netDxf.GTE.GVector.#ctor*
  nameWithType.vb: GVector.New(Double())
  fullName.vb: netDxf.GTE.GVector.New(Double())
  name.vb: New(Double())
- uid: netDxf.GTE.GVector.Size
  commentId: P:netDxf.GTE.GVector.Size
  id: Size
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: GVector.Size
  fullName: netDxf.GTE.GVector.Size
  type: Property
  source:
    id: Size
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 85
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public int Size { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Size As Integer
  overload: netDxf.GTE.GVector.Size*
- uid: netDxf.GTE.GVector.Item(System.Int32)
  commentId: P:netDxf.GTE.GVector.Item(System.Int32)
  id: Item(System.Int32)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: GVector.this[int]
  fullName: netDxf.GTE.GVector.this[int]
  type: Property
  source:
    id: this[]
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 90
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public double this[int i] { get; set; }
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Double
    content.vb: Public Default Property this[](i As Integer) As Double
  overload: netDxf.GTE.GVector.Item*
  nameWithType.vb: GVector.this[](Integer)
  fullName.vb: netDxf.GTE.GVector.this[](Integer)
  name.vb: this[](Integer)
- uid: netDxf.GTE.GVector.Vector
  commentId: P:netDxf.GTE.GVector.Vector
  id: Vector
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Vector
  nameWithType: GVector.Vector
  fullName: netDxf.GTE.GVector.Vector
  type: Property
  source:
    id: Vector
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 96
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public double[] Vector { get; }
    parameters: []
    return:
      type: System.Double[]
    content.vb: Public ReadOnly Property Vector As Double()
  overload: netDxf.GTE.GVector.Vector*
- uid: netDxf.GTE.GVector.op_Equality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_Equality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_Equality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator ==(GVector, GVector)
  nameWithType: GVector.operator ==(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator ==(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_Equality
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 102
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool operator ==(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(vec1 As GVector, vec2 As GVector) As Boolean
  overload: netDxf.GTE.GVector.op_Equality*
  nameWithType.vb: GVector.=(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.=(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: =(GVector, GVector)
- uid: netDxf.GTE.GVector.op_Inequality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_Inequality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_Inequality(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator !=(GVector, GVector)
  nameWithType: GVector.operator !=(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator !=(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_Inequality
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 111
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool operator !=(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(vec1 As GVector, vec2 As GVector) As Boolean
  overload: netDxf.GTE.GVector.op_Inequality*
  nameWithType.vb: GVector.<>(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.<>(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: <>(GVector, GVector)
- uid: netDxf.GTE.GVector.op_LessThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_LessThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_LessThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator <(GVector, GVector)
  nameWithType: GVector.operator <(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator <(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_LessThan
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 120
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool operator <(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <(vec1 As GVector, vec2 As GVector) As Boolean
  overload: netDxf.GTE.GVector.op_LessThan*
  nameWithType.vb: GVector.<(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.<(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: <(GVector, GVector)
- uid: netDxf.GTE.GVector.op_LessThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_LessThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_LessThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator <=(GVector, GVector)
  nameWithType: GVector.operator <=(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator <=(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_LessThanOrEqual
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 139
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool operator <=(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <=(vec1 As GVector, vec2 As GVector) As Boolean
  overload: netDxf.GTE.GVector.op_LessThanOrEqual*
  nameWithType.vb: GVector.<=(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.<=(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: <=(GVector, GVector)
- uid: netDxf.GTE.GVector.op_GreaterThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_GreaterThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_GreaterThan(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator >(GVector, GVector)
  nameWithType: GVector.operator >(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator >(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_GreaterThan
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 158
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool operator >(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >(vec1 As GVector, vec2 As GVector) As Boolean
  overload: netDxf.GTE.GVector.op_GreaterThan*
  nameWithType.vb: GVector.>(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.>(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: '>(GVector, GVector)'
- uid: netDxf.GTE.GVector.op_GreaterThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_GreaterThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_GreaterThanOrEqual(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator >=(GVector, GVector)
  nameWithType: GVector.operator >=(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator >=(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_GreaterThanOrEqual
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 177
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool operator >=(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: System.Boolean
    content.vb: Public Shared Operator >=(vec1 As GVector, vec2 As GVector) As Boolean
  overload: netDxf.GTE.GVector.op_GreaterThanOrEqual*
  nameWithType.vb: GVector.>=(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.>=(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: '>=(GVector, GVector)'
- uid: netDxf.GTE.GVector.MakeZero
  commentId: M:netDxf.GTE.GVector.MakeZero
  id: MakeZero
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: MakeZero()
  nameWithType: GVector.MakeZero()
  fullName: netDxf.GTE.GVector.MakeZero()
  type: Method
  source:
    id: MakeZero
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 199
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public void MakeZero()
    content.vb: Public Sub MakeZero()
  overload: netDxf.GTE.GVector.MakeZero*
- uid: netDxf.GTE.GVector.MakeUnit(System.Int32)
  commentId: M:netDxf.GTE.GVector.MakeUnit(System.Int32)
  id: MakeUnit(System.Int32)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: MakeUnit(int)
  nameWithType: GVector.MakeUnit(int)
  fullName: netDxf.GTE.GVector.MakeUnit(int)
  type: Method
  source:
    id: MakeUnit
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 208
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public void MakeUnit(int d)
    parameters:
    - id: d
      type: System.Int32
    content.vb: Public Sub MakeUnit(d As Integer)
  overload: netDxf.GTE.GVector.MakeUnit*
  nameWithType.vb: GVector.MakeUnit(Integer)
  fullName.vb: netDxf.GTE.GVector.MakeUnit(Integer)
  name.vb: MakeUnit(Integer)
- uid: netDxf.GTE.GVector.Zero(System.Int32)
  commentId: M:netDxf.GTE.GVector.Zero(System.Int32)
  id: Zero(System.Int32)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Zero(int)
  nameWithType: GVector.Zero(int)
  fullName: netDxf.GTE.GVector.Zero(int)
  type: Method
  source:
    id: Zero
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 223
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static GVector Zero(int size)
    parameters:
    - id: size
      type: System.Int32
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Shared Function Zero(size As Integer) As GVector
  overload: netDxf.GTE.GVector.Zero*
  nameWithType.vb: GVector.Zero(Integer)
  fullName.vb: netDxf.GTE.GVector.Zero(Integer)
  name.vb: Zero(Integer)
- uid: netDxf.GTE.GVector.Unit(System.Int32,System.Int32)
  commentId: M:netDxf.GTE.GVector.Unit(System.Int32,System.Int32)
  id: Unit(System.Int32,System.Int32)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Unit(int, int)
  nameWithType: GVector.Unit(int, int)
  fullName: netDxf.GTE.GVector.Unit(int, int)
  type: Method
  source:
    id: Unit
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 228
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static GVector Unit(int size, int d)
    parameters:
    - id: size
      type: System.Int32
    - id: d
      type: System.Int32
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Shared Function Unit(size As Integer, d As Integer) As GVector
  overload: netDxf.GTE.GVector.Unit*
  nameWithType.vb: GVector.Unit(Integer, Integer)
  fullName.vb: netDxf.GTE.GVector.Unit(Integer, Integer)
  name.vb: Unit(Integer, Integer)
- uid: netDxf.GTE.GVector.op_Addition(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_Addition(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_Addition(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator +(GVector, GVector)
  nameWithType: GVector.operator +(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator +(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_Addition
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 237
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static GVector operator +(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Shared Operator +(vec1 As GVector, vec2 As GVector) As GVector
  overload: netDxf.GTE.GVector.op_Addition*
  nameWithType.vb: GVector.+(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.+(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: +(GVector, GVector)
- uid: netDxf.GTE.GVector.op_Subtraction(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_Subtraction(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: op_Subtraction(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator -(GVector, GVector)
  nameWithType: GVector.operator -(GVector, GVector)
  fullName: netDxf.GTE.GVector.operator -(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_Subtraction
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 260
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static GVector operator -(GVector vec1, GVector vec2)
    parameters:
    - id: vec1
      type: netDxf.GTE.GVector
    - id: vec2
      type: netDxf.GTE.GVector
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Shared Operator -(vec1 As GVector, vec2 As GVector) As GVector
  overload: netDxf.GTE.GVector.op_Subtraction*
  nameWithType.vb: GVector.-(GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.-(netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: -(GVector, GVector)
- uid: netDxf.GTE.GVector.op_Multiply(System.Double,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.op_Multiply(System.Double,netDxf.GTE.GVector)
  id: op_Multiply(System.Double,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator *(double, GVector)
  nameWithType: GVector.operator *(double, GVector)
  fullName: netDxf.GTE.GVector.operator *(double, netDxf.GTE.GVector)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 283
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static GVector operator *(double scalar, GVector vec)
    parameters:
    - id: scalar
      type: System.Double
    - id: vec
      type: netDxf.GTE.GVector
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Shared Operator *(scalar As Double, vec As GVector) As GVector
  overload: netDxf.GTE.GVector.op_Multiply*
  nameWithType.vb: GVector.*(Double, GVector)
  fullName.vb: netDxf.GTE.GVector.*(Double, netDxf.GTE.GVector)
  name.vb: '*(Double, GVector)'
- uid: netDxf.GTE.GVector.op_Multiply(netDxf.GTE.GVector,System.Double)
  commentId: M:netDxf.GTE.GVector.op_Multiply(netDxf.GTE.GVector,System.Double)
  id: op_Multiply(netDxf.GTE.GVector,System.Double)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator *(GVector, double)
  nameWithType: GVector.operator *(GVector, double)
  fullName: netDxf.GTE.GVector.operator *(netDxf.GTE.GVector, double)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 300
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static GVector operator *(GVector vec, double scalar)
    parameters:
    - id: vec
      type: netDxf.GTE.GVector
    - id: scalar
      type: System.Double
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Shared Operator *(vec As GVector, scalar As Double) As GVector
  overload: netDxf.GTE.GVector.op_Multiply*
  nameWithType.vb: GVector.*(GVector, Double)
  fullName.vb: netDxf.GTE.GVector.*(netDxf.GTE.GVector, Double)
  name.vb: '*(GVector, Double)'
- uid: netDxf.GTE.GVector.op_Division(netDxf.GTE.GVector,System.Double)
  commentId: M:netDxf.GTE.GVector.op_Division(netDxf.GTE.GVector,System.Double)
  id: op_Division(netDxf.GTE.GVector,System.Double)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: operator /(GVector, double)
  nameWithType: GVector.operator /(GVector, double)
  fullName: netDxf.GTE.GVector.operator /(netDxf.GTE.GVector, double)
  type: Operator
  source:
    id: op_Division
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 305
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static GVector operator /(GVector vec, double scalar)
    parameters:
    - id: vec
      type: netDxf.GTE.GVector
    - id: scalar
      type: System.Double
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Shared Operator /(vec As GVector, scalar As Double) As GVector
  overload: netDxf.GTE.GVector.op_Division*
  nameWithType.vb: GVector./(GVector, Double)
  fullName.vb: netDxf.GTE.GVector./(netDxf.GTE.GVector, Double)
  name.vb: /(GVector, Double)
- uid: netDxf.GTE.GVector.Dot(netDxf.GTE.GVector,netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.Dot(netDxf.GTE.GVector,netDxf.GTE.GVector)
  id: Dot(netDxf.GTE.GVector,netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Dot(GVector, GVector)
  nameWithType: GVector.Dot(GVector, GVector)
  fullName: netDxf.GTE.GVector.Dot(netDxf.GTE.GVector, netDxf.GTE.GVector)
  type: Method
  source:
    id: Dot
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 316
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static double Dot(GVector v0, GVector v1)
    parameters:
    - id: v0
      type: netDxf.GTE.GVector
    - id: v1
      type: netDxf.GTE.GVector
    return:
      type: System.Double
    content.vb: Public Shared Function Dot(v0 As GVector, v1 As GVector) As Double
  overload: netDxf.GTE.GVector.Dot*
- uid: netDxf.GTE.GVector.Length(netDxf.GTE.GVector,System.Boolean)
  commentId: M:netDxf.GTE.GVector.Length(netDxf.GTE.GVector,System.Boolean)
  id: Length(netDxf.GTE.GVector,System.Boolean)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Length(GVector, bool)
  nameWithType: GVector.Length(GVector, bool)
  fullName: netDxf.GTE.GVector.Length(netDxf.GTE.GVector, bool)
  type: Method
  source:
    id: Length
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 338
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static double Length(GVector v, bool robust = false)
    parameters:
    - id: v
      type: netDxf.GTE.GVector
    - id: robust
      type: System.Boolean
    return:
      type: System.Double
    content.vb: Public Shared Function Length(v As GVector, robust As Boolean = False) As Double
  overload: netDxf.GTE.GVector.Length*
  nameWithType.vb: GVector.Length(GVector, Boolean)
  fullName.vb: netDxf.GTE.GVector.Length(netDxf.GTE.GVector, Boolean)
  name.vb: Length(GVector, Boolean)
- uid: netDxf.GTE.GVector.Normalize(netDxf.GTE.GVector@,System.Boolean)
  commentId: M:netDxf.GTE.GVector.Normalize(netDxf.GTE.GVector@,System.Boolean)
  id: Normalize(netDxf.GTE.GVector@,System.Boolean)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Normalize(ref GVector, bool)
  nameWithType: GVector.Normalize(ref GVector, bool)
  fullName: netDxf.GTE.GVector.Normalize(ref netDxf.GTE.GVector, bool)
  type: Method
  source:
    id: Normalize
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 374
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static double Normalize(ref GVector v, bool robust = false)
    parameters:
    - id: v
      type: netDxf.GTE.GVector
    - id: robust
      type: System.Boolean
    return:
      type: System.Double
    content.vb: Public Shared Function Normalize(v As GVector, robust As Boolean = False) As Double
  overload: netDxf.GTE.GVector.Normalize*
  nameWithType.vb: GVector.Normalize(GVector, Boolean)
  fullName.vb: netDxf.GTE.GVector.Normalize(netDxf.GTE.GVector, Boolean)
  name.vb: Normalize(GVector, Boolean)
- uid: netDxf.GTE.GVector.Orthonormalize(System.Int32,netDxf.GTE.GVector[]@,System.Boolean)
  commentId: M:netDxf.GTE.GVector.Orthonormalize(System.Int32,netDxf.GTE.GVector[]@,System.Boolean)
  id: Orthonormalize(System.Int32,netDxf.GTE.GVector[]@,System.Boolean)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Orthonormalize(int, ref GVector[], bool)
  nameWithType: GVector.Orthonormalize(int, ref GVector[], bool)
  fullName: netDxf.GTE.GVector.Orthonormalize(int, ref netDxf.GTE.GVector[], bool)
  type: Method
  source:
    id: Orthonormalize
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 439
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static double Orthonormalize(int numInputs, ref GVector[] v, bool robust = false)
    parameters:
    - id: numInputs
      type: System.Int32
    - id: v
      type: netDxf.GTE.GVector[]
    - id: robust
      type: System.Boolean
    return:
      type: System.Double
    content.vb: Public Shared Function Orthonormalize(numInputs As Integer, v As GVector(), robust As Boolean = False) As Double
  overload: netDxf.GTE.GVector.Orthonormalize*
  nameWithType.vb: GVector.Orthonormalize(Integer, GVector(), Boolean)
  fullName.vb: netDxf.GTE.GVector.Orthonormalize(Integer, netDxf.GTE.GVector(), Boolean)
  name.vb: Orthonormalize(Integer, GVector(), Boolean)
- uid: netDxf.GTE.GVector.ComputeExtremes(System.Int32,netDxf.GTE.GVector[],netDxf.GTE.GVector@,netDxf.GTE.GVector@)
  commentId: M:netDxf.GTE.GVector.ComputeExtremes(System.Int32,netDxf.GTE.GVector[],netDxf.GTE.GVector@,netDxf.GTE.GVector@)
  id: ComputeExtremes(System.Int32,netDxf.GTE.GVector[],netDxf.GTE.GVector@,netDxf.GTE.GVector@)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: ComputeExtremes(int, GVector[], out GVector, out GVector)
  nameWithType: GVector.ComputeExtremes(int, GVector[], out GVector, out GVector)
  fullName: netDxf.GTE.GVector.ComputeExtremes(int, netDxf.GTE.GVector[], out netDxf.GTE.GVector, out netDxf.GTE.GVector)
  type: Method
  source:
    id: ComputeExtremes
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 477
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public static bool ComputeExtremes(int numVectors, GVector[] v, out GVector vmin, out GVector vmax)
    parameters:
    - id: numVectors
      type: System.Int32
    - id: v
      type: netDxf.GTE.GVector[]
    - id: vmin
      type: netDxf.GTE.GVector
    - id: vmax
      type: netDxf.GTE.GVector
    return:
      type: System.Boolean
    content.vb: Public Shared Function ComputeExtremes(numVectors As Integer, v As GVector(), vmin As GVector, vmax As GVector) As Boolean
  overload: netDxf.GTE.GVector.ComputeExtremes*
  nameWithType.vb: GVector.ComputeExtremes(Integer, GVector(), GVector, GVector)
  fullName.vb: netDxf.GTE.GVector.ComputeExtremes(Integer, netDxf.GTE.GVector(), netDxf.GTE.GVector, netDxf.GTE.GVector)
  name.vb: ComputeExtremes(Integer, GVector(), GVector, GVector)
- uid: netDxf.GTE.GVector.HLift(netDxf.GTE.GVector,System.Double)
  commentId: M:netDxf.GTE.GVector.HLift(netDxf.GTE.GVector,System.Double)
  id: HLift(netDxf.GTE.GVector,System.Double)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: HLift(GVector, double)
  nameWithType: GVector.HLift(GVector, double)
  fullName: netDxf.GTE.GVector.HLift(netDxf.GTE.GVector, double)
  type: Method
  source:
    id: HLift
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 518
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public GVector HLift(GVector v, double last)
    parameters:
    - id: v
      type: netDxf.GTE.GVector
    - id: last
      type: System.Double
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Function HLift(v As GVector, last As Double) As GVector
  overload: netDxf.GTE.GVector.HLift*
  nameWithType.vb: GVector.HLift(GVector, Double)
  fullName.vb: netDxf.GTE.GVector.HLift(netDxf.GTE.GVector, Double)
  name.vb: HLift(GVector, Double)
- uid: netDxf.GTE.GVector.HProject(netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.HProject(netDxf.GTE.GVector)
  id: HProject(netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: HProject(GVector)
  nameWithType: GVector.HProject(GVector)
  fullName: netDxf.GTE.GVector.HProject(netDxf.GTE.GVector)
  type: Method
  source:
    id: HProject
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 537
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public GVector HProject(GVector v)
    parameters:
    - id: v
      type: netDxf.GTE.GVector
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Function HProject(v As GVector) As GVector
  overload: netDxf.GTE.GVector.HProject*
- uid: netDxf.GTE.GVector.Lift(netDxf.GTE.GVector,System.Int32,System.Double)
  commentId: M:netDxf.GTE.GVector.Lift(netDxf.GTE.GVector,System.Int32,System.Double)
  id: Lift(netDxf.GTE.GVector,System.Int32,System.Double)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Lift(GVector, int, double)
  nameWithType: GVector.Lift(GVector, int, double)
  fullName: netDxf.GTE.GVector.Lift(netDxf.GTE.GVector, int, double)
  type: Method
  source:
    id: Lift
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 563
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public GVector Lift(GVector v, int inject, double value)
    parameters:
    - id: v
      type: netDxf.GTE.GVector
    - id: inject
      type: System.Int32
    - id: value
      type: System.Double
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Function Lift(v As GVector, inject As Integer, value As Double) As GVector
  overload: netDxf.GTE.GVector.Lift*
  nameWithType.vb: GVector.Lift(GVector, Integer, Double)
  fullName.vb: netDxf.GTE.GVector.Lift(netDxf.GTE.GVector, Integer, Double)
  name.vb: Lift(GVector, Integer, Double)
- uid: netDxf.GTE.GVector.Project(netDxf.GTE.GVector,System.Int32)
  commentId: M:netDxf.GTE.GVector.Project(netDxf.GTE.GVector,System.Int32)
  id: Project(netDxf.GTE.GVector,System.Int32)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Project(GVector, int)
  nameWithType: GVector.Project(GVector, int)
  fullName: netDxf.GTE.GVector.Project(netDxf.GTE.GVector, int)
  type: Method
  source:
    id: Project
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 586
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  syntax:
    content: public GVector Project(GVector v, int reject)
    parameters:
    - id: v
      type: netDxf.GTE.GVector
    - id: reject
      type: System.Int32
    return:
      type: netDxf.GTE.GVector
    content.vb: Public Function Project(v As GVector, reject As Integer) As GVector
  overload: netDxf.GTE.GVector.Project*
  nameWithType.vb: GVector.Project(GVector, Integer)
  fullName.vb: netDxf.GTE.GVector.Project(netDxf.GTE.GVector, Integer)
  name.vb: Project(GVector, Integer)
- uid: netDxf.GTE.GVector.Equals(netDxf.GTE.GVector)
  commentId: M:netDxf.GTE.GVector.Equals(netDxf.GTE.GVector)
  id: Equals(netDxf.GTE.GVector)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Equals(GVector)
  nameWithType: GVector.Equals(GVector)
  fullName: netDxf.GTE.GVector.Equals(netDxf.GTE.GVector)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 608
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(GVector other)
    parameters:
    - id: other
      type: netDxf.GTE.GVector
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(other As GVector) As Boolean
  overload: netDxf.GTE.GVector.Equals*
  implements:
  - System.IEquatable{netDxf.GTE.GVector}.Equals(netDxf.GTE.GVector)
- uid: netDxf.GTE.GVector.Equals(System.Object)
  commentId: M:netDxf.GTE.GVector.Equals(System.Object)
  id: Equals(System.Object)
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: GVector.Equals(object)
  fullName: netDxf.GTE.GVector.Equals(object)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 632
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  summary: Determines whether the specified object is equal to the current object.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the specified object  is equal to the current object; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: netDxf.GTE.GVector.Equals*
  nameWithType.vb: GVector.Equals(Object)
  fullName.vb: netDxf.GTE.GVector.Equals(Object)
  name.vb: Equals(Object)
- uid: netDxf.GTE.GVector.GetHashCode
  commentId: M:netDxf.GTE.GVector.GetHashCode
  id: GetHashCode
  parent: netDxf.GTE.GVector
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: GVector.GetHashCode()
  fullName: netDxf.GTE.GVector.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/GTE/GVector.cs
    startLine: 642
  assemblies:
  - netDxf
  namespace: netDxf.GTE
  summary: Serves as the default hash function.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for the current object.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: netDxf.GTE.GVector.GetHashCode*
references:
- uid: netDxf.GTE
  commentId: N:netDxf.GTE
  href: netDxf.html
  name: netDxf.GTE
  nameWithType: netDxf.GTE
  fullName: netDxf.GTE
  spec.csharp:
  - uid: netDxf
    name: netDxf
    href: netDxf.html
  - name: .
  - uid: netDxf.GTE
    name: GTE
    href: netDxf.GTE.html
  spec.vb:
  - uid: netDxf
    name: netDxf
    href: netDxf.html
  - name: .
  - uid: netDxf.GTE
    name: GTE
    href: netDxf.GTE.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IEquatable{netDxf.GTE.GVector}
  commentId: T:System.IEquatable{netDxf.GTE.GVector}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<GVector>
  nameWithType: IEquatable<GVector>
  fullName: System.IEquatable<netDxf.GTE.GVector>
  nameWithType.vb: IEquatable(Of GVector)
  fullName.vb: System.IEquatable(Of netDxf.GTE.GVector)
  name.vb: IEquatable(Of GVector)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: netDxf.GTE.GVector
    name: GVector
    href: netDxf.GTE.GVector.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: netDxf.GTE.GVector
    name: GVector
    href: netDxf.GTE.GVector.html
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: netDxf.GTE.GVector.#ctor*
  commentId: Overload:netDxf.GTE.GVector.#ctor
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector__ctor_System_Int32_
  name: GVector
  nameWithType: GVector.GVector
  fullName: netDxf.GTE.GVector.GVector
  nameWithType.vb: GVector.New
  fullName.vb: netDxf.GTE.GVector.New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Double[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double[]
  nameWithType: double[]
  fullName: double[]
  nameWithType.vb: Double()
  fullName.vb: Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: (
  - name: )
- uid: netDxf.GTE.GVector.Size*
  commentId: Overload:netDxf.GTE.GVector.Size
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Size
  name: Size
  nameWithType: GVector.Size
  fullName: netDxf.GTE.GVector.Size
- uid: netDxf.GTE.GVector.Item*
  commentId: Overload:netDxf.GTE.GVector.Item
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Item_System_Int32_
  name: this
  nameWithType: GVector.this
  fullName: netDxf.GTE.GVector.this
  nameWithType.vb: GVector.this[]
  fullName.vb: netDxf.GTE.GVector.this[]
  name.vb: this[]
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: netDxf.GTE.GVector.Vector*
  commentId: Overload:netDxf.GTE.GVector.Vector
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Vector
  name: Vector
  nameWithType: GVector.Vector
  fullName: netDxf.GTE.GVector.Vector
- uid: netDxf.GTE.GVector.op_Equality*
  commentId: Overload:netDxf.GTE.GVector.op_Equality
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Equality_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator ==
  nameWithType: GVector.operator ==
  fullName: netDxf.GTE.GVector.operator ==
  nameWithType.vb: GVector.=
  fullName.vb: netDxf.GTE.GVector.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_Equality*
    name: ==
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Equality_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector
  commentId: T:netDxf.GTE.GVector
  parent: netDxf.GTE
  href: netDxf.GTE.GVector.html
  name: GVector
  nameWithType: GVector
  fullName: netDxf.GTE.GVector
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: netDxf.GTE.GVector.op_Inequality*
  commentId: Overload:netDxf.GTE.GVector.op_Inequality
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Inequality_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator !=
  nameWithType: GVector.operator !=
  fullName: netDxf.GTE.GVector.operator !=
  nameWithType.vb: GVector.<>
  fullName.vb: netDxf.GTE.GVector.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_Inequality*
    name: '!='
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Inequality_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.op_LessThan*
  commentId: Overload:netDxf.GTE.GVector.op_LessThan
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_LessThan_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator <
  nameWithType: GVector.operator <
  fullName: netDxf.GTE.GVector.operator <
  nameWithType.vb: GVector.<
  fullName.vb: netDxf.GTE.GVector.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_LessThan*
    name: <
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_LessThan_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.op_LessThanOrEqual*
  commentId: Overload:netDxf.GTE.GVector.op_LessThanOrEqual
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_LessThanOrEqual_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator <=
  nameWithType: GVector.operator <=
  fullName: netDxf.GTE.GVector.operator <=
  nameWithType.vb: GVector.<=
  fullName.vb: netDxf.GTE.GVector.<=
  name.vb: <=
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_LessThanOrEqual*
    name: <=
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_LessThanOrEqual_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.op_GreaterThan*
  commentId: Overload:netDxf.GTE.GVector.op_GreaterThan
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_GreaterThan_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator >
  nameWithType: GVector.operator >
  fullName: netDxf.GTE.GVector.operator >
  nameWithType.vb: GVector.>
  fullName.vb: netDxf.GTE.GVector.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_GreaterThan*
    name: '>'
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_GreaterThan_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.op_GreaterThanOrEqual*
  commentId: Overload:netDxf.GTE.GVector.op_GreaterThanOrEqual
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_GreaterThanOrEqual_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator >=
  nameWithType: GVector.operator >=
  fullName: netDxf.GTE.GVector.operator >=
  nameWithType.vb: GVector.>=
  fullName.vb: netDxf.GTE.GVector.>=
  name.vb: '>='
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_GreaterThanOrEqual*
    name: '>='
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_GreaterThanOrEqual_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.MakeZero*
  commentId: Overload:netDxf.GTE.GVector.MakeZero
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_MakeZero
  name: MakeZero
  nameWithType: GVector.MakeZero
  fullName: netDxf.GTE.GVector.MakeZero
- uid: netDxf.GTE.GVector.MakeUnit*
  commentId: Overload:netDxf.GTE.GVector.MakeUnit
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_MakeUnit_System_Int32_
  name: MakeUnit
  nameWithType: GVector.MakeUnit
  fullName: netDxf.GTE.GVector.MakeUnit
- uid: netDxf.GTE.GVector.Zero*
  commentId: Overload:netDxf.GTE.GVector.Zero
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Zero_System_Int32_
  name: Zero
  nameWithType: GVector.Zero
  fullName: netDxf.GTE.GVector.Zero
- uid: netDxf.GTE.GVector.Unit*
  commentId: Overload:netDxf.GTE.GVector.Unit
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Unit_System_Int32_System_Int32_
  name: Unit
  nameWithType: GVector.Unit
  fullName: netDxf.GTE.GVector.Unit
- uid: netDxf.GTE.GVector.op_Addition*
  commentId: Overload:netDxf.GTE.GVector.op_Addition
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Addition_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator +
  nameWithType: GVector.operator +
  fullName: netDxf.GTE.GVector.operator +
  nameWithType.vb: GVector.+
  fullName.vb: netDxf.GTE.GVector.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_Addition*
    name: +
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Addition_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.op_Subtraction*
  commentId: Overload:netDxf.GTE.GVector.op_Subtraction
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Subtraction_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: operator -
  nameWithType: GVector.operator -
  fullName: netDxf.GTE.GVector.operator -
  nameWithType.vb: GVector.-
  fullName.vb: netDxf.GTE.GVector.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_Subtraction*
    name: '-'
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Subtraction_netDxf_GTE_GVector_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.op_Multiply*
  commentId: Overload:netDxf.GTE.GVector.op_Multiply
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Multiply_System_Double_netDxf_GTE_GVector_
  name: operator *
  nameWithType: GVector.operator *
  fullName: netDxf.GTE.GVector.operator *
  nameWithType.vb: GVector.*
  fullName.vb: netDxf.GTE.GVector.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_Multiply*
    name: '*'
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Multiply_System_Double_netDxf_GTE_GVector_
- uid: netDxf.GTE.GVector.op_Division*
  commentId: Overload:netDxf.GTE.GVector.op_Division
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Division_netDxf_GTE_GVector_System_Double_
  name: operator /
  nameWithType: GVector.operator /
  fullName: netDxf.GTE.GVector.operator /
  nameWithType.vb: GVector./
  fullName.vb: netDxf.GTE.GVector./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.GTE.GVector.op_Division*
    name: /
    href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_op_Division_netDxf_GTE_GVector_System_Double_
- uid: netDxf.GTE.GVector.Dot*
  commentId: Overload:netDxf.GTE.GVector.Dot
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Dot_netDxf_GTE_GVector_netDxf_GTE_GVector_
  name: Dot
  nameWithType: GVector.Dot
  fullName: netDxf.GTE.GVector.Dot
- uid: netDxf.GTE.GVector.Length*
  commentId: Overload:netDxf.GTE.GVector.Length
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Length_netDxf_GTE_GVector_System_Boolean_
  name: Length
  nameWithType: GVector.Length
  fullName: netDxf.GTE.GVector.Length
- uid: netDxf.GTE.GVector.Normalize*
  commentId: Overload:netDxf.GTE.GVector.Normalize
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Normalize_netDxf_GTE_GVector__System_Boolean_
  name: Normalize
  nameWithType: GVector.Normalize
  fullName: netDxf.GTE.GVector.Normalize
- uid: netDxf.GTE.GVector.Orthonormalize*
  commentId: Overload:netDxf.GTE.GVector.Orthonormalize
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Orthonormalize_System_Int32_netDxf_GTE_GVector____System_Boolean_
  name: Orthonormalize
  nameWithType: GVector.Orthonormalize
  fullName: netDxf.GTE.GVector.Orthonormalize
- uid: netDxf.GTE.GVector[]
  isExternal: true
  href: netDxf.GTE.GVector.html
  name: GVector[]
  nameWithType: GVector[]
  fullName: netDxf.GTE.GVector[]
  nameWithType.vb: GVector()
  fullName.vb: netDxf.GTE.GVector()
  name.vb: GVector()
  spec.csharp:
  - uid: netDxf.GTE.GVector
    name: GVector
    href: netDxf.GTE.GVector.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: netDxf.GTE.GVector
    name: GVector
    href: netDxf.GTE.GVector.html
  - name: (
  - name: )
- uid: netDxf.GTE.GVector.ComputeExtremes*
  commentId: Overload:netDxf.GTE.GVector.ComputeExtremes
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_ComputeExtremes_System_Int32_netDxf_GTE_GVector___netDxf_GTE_GVector__netDxf_GTE_GVector__
  name: ComputeExtremes
  nameWithType: GVector.ComputeExtremes
  fullName: netDxf.GTE.GVector.ComputeExtremes
- uid: netDxf.GTE.GVector.HLift*
  commentId: Overload:netDxf.GTE.GVector.HLift
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_HLift_netDxf_GTE_GVector_System_Double_
  name: HLift
  nameWithType: GVector.HLift
  fullName: netDxf.GTE.GVector.HLift
- uid: netDxf.GTE.GVector.HProject*
  commentId: Overload:netDxf.GTE.GVector.HProject
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_HProject_netDxf_GTE_GVector_
  name: HProject
  nameWithType: GVector.HProject
  fullName: netDxf.GTE.GVector.HProject
- uid: netDxf.GTE.GVector.Lift*
  commentId: Overload:netDxf.GTE.GVector.Lift
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Lift_netDxf_GTE_GVector_System_Int32_System_Double_
  name: Lift
  nameWithType: GVector.Lift
  fullName: netDxf.GTE.GVector.Lift
- uid: netDxf.GTE.GVector.Project*
  commentId: Overload:netDxf.GTE.GVector.Project
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Project_netDxf_GTE_GVector_System_Int32_
  name: Project
  nameWithType: GVector.Project
  fullName: netDxf.GTE.GVector.Project
- uid: netDxf.GTE.GVector.Equals*
  commentId: Overload:netDxf.GTE.GVector.Equals
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_Equals_netDxf_GTE_GVector_
  name: Equals
  nameWithType: GVector.Equals
  fullName: netDxf.GTE.GVector.Equals
- uid: System.IEquatable{netDxf.GTE.GVector}.Equals(netDxf.GTE.GVector)
  commentId: M:System.IEquatable{netDxf.GTE.GVector}.Equals(netDxf.GTE.GVector)
  parent: System.IEquatable{netDxf.GTE.GVector}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(GVector)
  nameWithType: IEquatable<GVector>.Equals(GVector)
  fullName: System.IEquatable<netDxf.GTE.GVector>.Equals(netDxf.GTE.GVector)
  nameWithType.vb: IEquatable(Of GVector).Equals(GVector)
  fullName.vb: System.IEquatable(Of netDxf.GTE.GVector).Equals(netDxf.GTE.GVector)
  spec.csharp:
  - uid: System.IEquatable{netDxf.GTE.GVector}.Equals(netDxf.GTE.GVector)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: netDxf.GTE.GVector
    name: GVector
    href: netDxf.GTE.GVector.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{netDxf.GTE.GVector}.Equals(netDxf.GTE.GVector)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: netDxf.GTE.GVector
    name: GVector
    href: netDxf.GTE.GVector.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: netDxf.GTE.GVector.GetHashCode*
  commentId: Overload:netDxf.GTE.GVector.GetHashCode
  href: netDxf.GTE.GVector.html#netDxf_GTE_GVector_GetHashCode
  name: GetHashCode
  nameWithType: GVector.GetHashCode
  fullName: netDxf.GTE.GVector.GetHashCode
