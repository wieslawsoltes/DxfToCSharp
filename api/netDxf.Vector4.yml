### YamlMime:ManagedReference
items:
- uid: netDxf.Vector4
  commentId: T:netDxf.Vector4
  id: Vector4
  parent: netDxf
  children:
  - netDxf.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)
  - netDxf.Vector4.#ctor(System.Double[])
  - netDxf.Vector4.Add(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.Distance(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.Divide(netDxf.Vector4,System.Double)
  - netDxf.Vector4.Divide(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.DotProduct(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.Equals(System.Object)
  - netDxf.Vector4.Equals(netDxf.Vector4)
  - netDxf.Vector4.Equals(netDxf.Vector4,System.Double)
  - netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4,System.Double)
  - netDxf.Vector4.GetHashCode
  - netDxf.Vector4.IsNaN(netDxf.Vector4)
  - netDxf.Vector4.IsNormalized
  - netDxf.Vector4.IsZero(netDxf.Vector4)
  - netDxf.Vector4.Item(System.Int32)
  - netDxf.Vector4.Modulus
  - netDxf.Vector4.Multiply(System.Double,netDxf.Vector4)
  - netDxf.Vector4.Multiply(netDxf.Vector4,System.Double)
  - netDxf.Vector4.Multiply(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.NaN
  - netDxf.Vector4.Negate(netDxf.Vector4)
  - netDxf.Vector4.Normalize
  - netDxf.Vector4.Normalize(netDxf.Vector4)
  - netDxf.Vector4.Round(netDxf.Vector4,System.Int32)
  - netDxf.Vector4.SquareDistance(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.Subtract(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.ToArray
  - netDxf.Vector4.ToString
  - netDxf.Vector4.ToString(System.IFormatProvider)
  - netDxf.Vector4.UnitW
  - netDxf.Vector4.UnitX
  - netDxf.Vector4.UnitY
  - netDxf.Vector4.UnitZ
  - netDxf.Vector4.W
  - netDxf.Vector4.X
  - netDxf.Vector4.Y
  - netDxf.Vector4.Z
  - netDxf.Vector4.Zero
  - netDxf.Vector4.op_Addition(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.op_Division(netDxf.Vector4,System.Double)
  - netDxf.Vector4.op_Division(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.op_Equality(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.op_Inequality(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.op_Multiply(System.Double,netDxf.Vector4)
  - netDxf.Vector4.op_Multiply(netDxf.Vector4,System.Double)
  - netDxf.Vector4.op_Multiply(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.op_Subtraction(netDxf.Vector4,netDxf.Vector4)
  - netDxf.Vector4.op_UnaryNegation(netDxf.Vector4)
  langs:
  - csharp
  - vb
  name: Vector4
  nameWithType: Vector4
  fullName: netDxf.Vector4
  type: Struct
  source:
    id: Vector4
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 33
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Represent a four component vector of double precision.
  example: []
  syntax:
    content: 'public struct Vector4 : IEquatable<Vector4>'
    content.vb: Public Structure Vector4 Implements IEquatable(Of Vector4)
  implements:
  - System.IEquatable{netDxf.Vector4}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: netDxf.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)
  commentId: M:netDxf.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Vector4(double, double, double, double)
  nameWithType: Vector4.Vector4(double, double, double, double)
  fullName: netDxf.Vector4.Vector4(double, double, double, double)
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 56
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Initializes a new instance of Vector4.
  example: []
  syntax:
    content: public Vector4(double x, double y, double z, double w)
    parameters:
    - id: x
      type: System.Double
      description: X component.
    - id: y
      type: System.Double
      description: Y component.
    - id: z
      type: System.Double
      description: Z component.
    - id: w
      type: System.Double
      description: W component.
    content.vb: Public Sub New(x As Double, y As Double, z As Double, w As Double)
  overload: netDxf.Vector4.#ctor*
  nameWithType.vb: Vector4.New(Double, Double, Double, Double)
  fullName.vb: netDxf.Vector4.New(Double, Double, Double, Double)
  name.vb: New(Double, Double, Double, Double)
- uid: netDxf.Vector4.#ctor(System.Double[])
  commentId: M:netDxf.Vector4.#ctor(System.Double[])
  id: '#ctor(System.Double[])'
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Vector4(double[])
  nameWithType: Vector4.Vector4(double[])
  fullName: netDxf.Vector4.Vector4(double[])
  type: Constructor
  source:
    id: .ctor
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 69
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Initializes a new instance of Vector4.
  example: []
  syntax:
    content: public Vector4(double[] array)
    parameters:
    - id: array
      type: System.Double[]
      description: Array of four elements that represents the vector.
    content.vb: Public Sub New(array As Double())
  overload: netDxf.Vector4.#ctor*
  nameWithType.vb: Vector4.New(Double())
  fullName.vb: netDxf.Vector4.New(Double())
  name.vb: New(Double())
- uid: netDxf.Vector4.Zero
  commentId: P:netDxf.Vector4.Zero
  id: Zero
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: Vector4.Zero
  fullName: netDxf.Vector4.Zero
  type: Property
  source:
    id: Zero
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 95
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Zero vector.
  example: []
  syntax:
    content: public static Vector4 Zero { get; }
    parameters: []
    return:
      type: netDxf.Vector4
    content.vb: Public Shared ReadOnly Property Zero As Vector4
  overload: netDxf.Vector4.Zero*
- uid: netDxf.Vector4.UnitX
  commentId: P:netDxf.Vector4.UnitX
  id: UnitX
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: UnitX
  nameWithType: Vector4.UnitX
  fullName: netDxf.Vector4.UnitX
  type: Property
  source:
    id: UnitX
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 103
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Unit X vector.
  example: []
  syntax:
    content: public static Vector4 UnitX { get; }
    parameters: []
    return:
      type: netDxf.Vector4
    content.vb: Public Shared ReadOnly Property UnitX As Vector4
  overload: netDxf.Vector4.UnitX*
- uid: netDxf.Vector4.UnitY
  commentId: P:netDxf.Vector4.UnitY
  id: UnitY
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: UnitY
  nameWithType: Vector4.UnitY
  fullName: netDxf.Vector4.UnitY
  type: Property
  source:
    id: UnitY
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 111
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Unit Y vector.
  example: []
  syntax:
    content: public static Vector4 UnitY { get; }
    parameters: []
    return:
      type: netDxf.Vector4
    content.vb: Public Shared ReadOnly Property UnitY As Vector4
  overload: netDxf.Vector4.UnitY*
- uid: netDxf.Vector4.UnitZ
  commentId: P:netDxf.Vector4.UnitZ
  id: UnitZ
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: UnitZ
  nameWithType: Vector4.UnitZ
  fullName: netDxf.Vector4.UnitZ
  type: Property
  source:
    id: UnitZ
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 119
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Unit Z vector.
  example: []
  syntax:
    content: public static Vector4 UnitZ { get; }
    parameters: []
    return:
      type: netDxf.Vector4
    content.vb: Public Shared ReadOnly Property UnitZ As Vector4
  overload: netDxf.Vector4.UnitZ*
- uid: netDxf.Vector4.UnitW
  commentId: P:netDxf.Vector4.UnitW
  id: UnitW
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: UnitW
  nameWithType: Vector4.UnitW
  fullName: netDxf.Vector4.UnitW
  type: Property
  source:
    id: UnitW
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 127
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Unit W vector.
  example: []
  syntax:
    content: public static Vector4 UnitW { get; }
    parameters: []
    return:
      type: netDxf.Vector4
    content.vb: Public Shared ReadOnly Property UnitW As Vector4
  overload: netDxf.Vector4.UnitW*
- uid: netDxf.Vector4.NaN
  commentId: P:netDxf.Vector4.NaN
  id: NaN
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: NaN
  nameWithType: Vector4.NaN
  fullName: netDxf.Vector4.NaN
  type: Property
  source:
    id: NaN
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 135
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Represents a vector with not a number components.
  example: []
  syntax:
    content: public static Vector4 NaN { get; }
    parameters: []
    return:
      type: netDxf.Vector4
    content.vb: Public Shared ReadOnly Property NaN As Vector4
  overload: netDxf.Vector4.NaN*
- uid: netDxf.Vector4.X
  commentId: P:netDxf.Vector4.X
  id: X
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector4.X
  fullName: netDxf.Vector4.X
  type: Property
  source:
    id: X
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 147
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets the X component.
  example: []
  syntax:
    content: public double X { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property X As Double
  overload: netDxf.Vector4.X*
- uid: netDxf.Vector4.Y
  commentId: P:netDxf.Vector4.Y
  id: Y
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector4.Y
  fullName: netDxf.Vector4.Y
  type: Property
  source:
    id: Y
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 160
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets the Y component.
  example: []
  syntax:
    content: public double Y { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Y As Double
  overload: netDxf.Vector4.Y*
- uid: netDxf.Vector4.Z
  commentId: P:netDxf.Vector4.Z
  id: Z
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Vector4.Z
  fullName: netDxf.Vector4.Z
  type: Property
  source:
    id: Z
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 173
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets the Z component.
  example: []
  syntax:
    content: public double Z { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Z As Double
  overload: netDxf.Vector4.Z*
- uid: netDxf.Vector4.W
  commentId: P:netDxf.Vector4.W
  id: W
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: W
  nameWithType: Vector4.W
  fullName: netDxf.Vector4.W
  type: Property
  source:
    id: W
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 186
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets the W component.
  example: []
  syntax:
    content: public double W { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property W As Double
  overload: netDxf.Vector4.W*
- uid: netDxf.Vector4.Item(System.Int32)
  commentId: P:netDxf.Vector4.Item(System.Int32)
  id: Item(System.Int32)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: Vector4.this[int]
  fullName: netDxf.Vector4.this[int]
  type: Property
  source:
    id: this[]
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 200
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets or sets a vector element defined by its index.
  example: []
  syntax:
    content: public double this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of the element.
    return:
      type: System.Double
    content.vb: Public Default Property this[](index As Integer) As Double
  overload: netDxf.Vector4.Item*
  nameWithType.vb: Vector4.this[](Integer)
  fullName.vb: netDxf.Vector4.this[](Integer)
  name.vb: this[](Integer)
- uid: netDxf.Vector4.IsNormalized
  commentId: P:netDxf.Vector4.IsNormalized
  id: IsNormalized
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: IsNormalized
  nameWithType: Vector4.IsNormalized
  fullName: netDxf.Vector4.IsNormalized
  type: Property
  source:
    id: IsNormalized
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 245
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Gets if the vector has been normalized.
  example: []
  syntax:
    content: public bool IsNormalized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNormalized As Boolean
  overload: netDxf.Vector4.IsNormalized*
- uid: netDxf.Vector4.IsNaN(netDxf.Vector4)
  commentId: M:netDxf.Vector4.IsNaN(netDxf.Vector4)
  id: IsNaN(netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: IsNaN(Vector4)
  nameWithType: Vector4.IsNaN(Vector4)
  fullName: netDxf.Vector4.IsNaN(netDxf.Vector4)
  type: Method
  source:
    id: IsNaN
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 259
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static bool IsNaN(Vector4 u)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Boolean
      description: Returns true if any component of the specified vector evaluates to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>; otherwise, false.
    content.vb: Public Shared Function IsNaN(u As Vector4) As Boolean
  overload: netDxf.Vector4.IsNaN*
- uid: netDxf.Vector4.IsZero(netDxf.Vector4)
  commentId: M:netDxf.Vector4.IsZero(netDxf.Vector4)
  id: IsZero(netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: IsZero(Vector4)
  nameWithType: Vector4.IsZero(Vector4)
  fullName: netDxf.Vector4.IsZero(netDxf.Vector4)
  type: Method
  source:
    id: IsZero
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 269
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns a value indicating if all components of the specified vector evaluates to zero.
  example: []
  syntax:
    content: public static bool IsZero(Vector4 u)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Boolean
      description: Returns true if all components of the specified vector evaluates to zero; otherwise, false.
    content.vb: Public Shared Function IsZero(u As Vector4) As Boolean
  overload: netDxf.Vector4.IsZero*
- uid: netDxf.Vector4.DotProduct(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.DotProduct(netDxf.Vector4,netDxf.Vector4)
  id: DotProduct(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: DotProduct(Vector4, Vector4)
  nameWithType: Vector4.DotProduct(Vector4, Vector4)
  fullName: netDxf.Vector4.DotProduct(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: DotProduct
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 280
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the dot product of two vectors.
  example: []
  syntax:
    content: public static double DotProduct(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Double
      description: The dot product.
    content.vb: Public Shared Function DotProduct(u As Vector4, v As Vector4) As Double
  overload: netDxf.Vector4.DotProduct*
- uid: netDxf.Vector4.Distance(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.Distance(netDxf.Vector4,netDxf.Vector4)
  id: Distance(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Distance(Vector4, Vector4)
  nameWithType: Vector4.Distance(Vector4, Vector4)
  fullName: netDxf.Vector4.Distance(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: Distance
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 291
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the distance between two points.
  example: []
  syntax:
    content: public static double Distance(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Double
      description: Distance.
    content.vb: Public Shared Function Distance(u As Vector4, v As Vector4) As Double
  overload: netDxf.Vector4.Distance*
- uid: netDxf.Vector4.SquareDistance(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.SquareDistance(netDxf.Vector4,netDxf.Vector4)
  id: SquareDistance(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: SquareDistance(Vector4, Vector4)
  nameWithType: Vector4.SquareDistance(Vector4, Vector4)
  fullName: netDxf.Vector4.SquareDistance(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: SquareDistance
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 302
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the square distance between two points.
  example: []
  syntax:
    content: public static double SquareDistance(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Double
      description: Square distance.
    content.vb: Public Shared Function SquareDistance(u As Vector4, v As Vector4) As Double
  overload: netDxf.Vector4.SquareDistance*
- uid: netDxf.Vector4.Round(netDxf.Vector4,System.Int32)
  commentId: M:netDxf.Vector4.Round(netDxf.Vector4,System.Int32)
  id: Round(netDxf.Vector4,System.Int32)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Round(Vector4, int)
  nameWithType: Vector4.Round(Vector4, int)
  fullName: netDxf.Vector4.Round(netDxf.Vector4, int)
  type: Method
  source:
    id: Round
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 313
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Rounds the components of a vector.
  example: []
  syntax:
    content: public static Vector4 Round(Vector4 u, int numDigits)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector to round.
    - id: numDigits
      type: System.Int32
      description: Number of decimal places in the return value.
    return:
      type: netDxf.Vector4
      description: The rounded vector.
    content.vb: Public Shared Function Round(u As Vector4, numDigits As Integer) As Vector4
  overload: netDxf.Vector4.Round*
  nameWithType.vb: Vector4.Round(Vector4, Integer)
  fullName.vb: netDxf.Vector4.Round(netDxf.Vector4, Integer)
  name.vb: Round(Vector4, Integer)
- uid: netDxf.Vector4.Normalize(netDxf.Vector4)
  commentId: M:netDxf.Vector4.Normalize(netDxf.Vector4)
  id: Normalize(netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Normalize(Vector4)
  nameWithType: Vector4.Normalize(Vector4)
  fullName: netDxf.Vector4.Normalize(netDxf.Vector4)
  type: Method
  source:
    id: Normalize
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 323
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Normalizes the vector.
  example: []
  syntax:
    content: public static Vector4 Normalize(Vector4 u)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector to normalize
    return:
      type: netDxf.Vector4
      description: The normalized vector.
    content.vb: Public Shared Function Normalize(u As Vector4) As Vector4
  overload: netDxf.Vector4.Normalize*
- uid: netDxf.Vector4.op_Equality(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_Equality(netDxf.Vector4,netDxf.Vector4)
  id: op_Equality(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator ==(Vector4, Vector4)
  nameWithType: Vector4.operator ==(Vector4, Vector4)
  fullName: netDxf.Vector4.operator ==(netDxf.Vector4, netDxf.Vector4)
  type: Operator
  source:
    id: op_Equality
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 350
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are equal.
  example: []
  syntax:
    content: public static bool operator ==(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Boolean
      description: True if the three components are equal or false in any other case.
    content.vb: Public Shared Operator =(u As Vector4, v As Vector4) As Boolean
  overload: netDxf.Vector4.op_Equality*
  nameWithType.vb: Vector4.=(Vector4, Vector4)
  fullName.vb: netDxf.Vector4.=(netDxf.Vector4, netDxf.Vector4)
  name.vb: =(Vector4, Vector4)
- uid: netDxf.Vector4.op_Inequality(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_Inequality(netDxf.Vector4,netDxf.Vector4)
  id: op_Inequality(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator !=(Vector4, Vector4)
  nameWithType: Vector4.operator !=(Vector4, Vector4)
  fullName: netDxf.Vector4.operator !=(netDxf.Vector4, netDxf.Vector4)
  type: Operator
  source:
    id: op_Inequality
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 361
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are different.
  example: []
  syntax:
    content: public static bool operator !=(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Boolean
      description: True if the three components are different or false in any other case.
    content.vb: Public Shared Operator <>(u As Vector4, v As Vector4) As Boolean
  overload: netDxf.Vector4.op_Inequality*
  nameWithType.vb: Vector4.<>(Vector4, Vector4)
  fullName.vb: netDxf.Vector4.<>(netDxf.Vector4, netDxf.Vector4)
  name.vb: <>(Vector4, Vector4)
- uid: netDxf.Vector4.op_Addition(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_Addition(netDxf.Vector4,netDxf.Vector4)
  id: op_Addition(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator +(Vector4, Vector4)
  nameWithType: Vector4.operator +(Vector4, Vector4)
  fullName: netDxf.Vector4.operator +(netDxf.Vector4, netDxf.Vector4)
  type: Operator
  source:
    id: op_Addition
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 372
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Adds two vectors.
  example: []
  syntax:
    content: public static Vector4 operator +(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The addition of u plus v.
    content.vb: Public Shared Operator +(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.op_Addition*
  nameWithType.vb: Vector4.+(Vector4, Vector4)
  fullName.vb: netDxf.Vector4.+(netDxf.Vector4, netDxf.Vector4)
  name.vb: +(Vector4, Vector4)
- uid: netDxf.Vector4.Add(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.Add(netDxf.Vector4,netDxf.Vector4)
  id: Add(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Add(Vector4, Vector4)
  nameWithType: Vector4.Add(Vector4, Vector4)
  fullName: netDxf.Vector4.Add(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: Add
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 383
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Adds two vectors.
  example: []
  syntax:
    content: public static Vector4 Add(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The addition of u plus v.
    content.vb: Public Shared Function Add(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.Add*
- uid: netDxf.Vector4.op_Subtraction(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_Subtraction(netDxf.Vector4,netDxf.Vector4)
  id: op_Subtraction(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator -(Vector4, Vector4)
  nameWithType: Vector4.operator -(Vector4, Vector4)
  fullName: netDxf.Vector4.operator -(netDxf.Vector4, netDxf.Vector4)
  type: Operator
  source:
    id: op_Subtraction
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 394
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Subtracts two vectors.
  example: []
  syntax:
    content: public static Vector4 operator -(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The subtraction of u minus v.
    content.vb: Public Shared Operator -(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.op_Subtraction*
  nameWithType.vb: Vector4.-(Vector4, Vector4)
  fullName.vb: netDxf.Vector4.-(netDxf.Vector4, netDxf.Vector4)
  name.vb: -(Vector4, Vector4)
- uid: netDxf.Vector4.Subtract(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.Subtract(netDxf.Vector4,netDxf.Vector4)
  id: Subtract(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Subtract(Vector4, Vector4)
  nameWithType: Vector4.Subtract(Vector4, Vector4)
  fullName: netDxf.Vector4.Subtract(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: Subtract
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 405
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Subtracts two vectors.
  example: []
  syntax:
    content: public static Vector4 Subtract(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The subtraction of u minus v.
    content.vb: Public Shared Function Subtract(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.Subtract*
- uid: netDxf.Vector4.op_UnaryNegation(netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_UnaryNegation(netDxf.Vector4)
  id: op_UnaryNegation(netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator -(Vector4)
  nameWithType: Vector4.operator -(Vector4)
  fullName: netDxf.Vector4.operator -(netDxf.Vector4)
  type: Operator
  source:
    id: op_UnaryNegation
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 415
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Negates a vector.
  example: []
  syntax:
    content: public static Vector4 operator -(Vector4 u)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The negative vector of u.
    content.vb: Public Shared Operator -(u As Vector4) As Vector4
  overload: netDxf.Vector4.op_UnaryNegation*
  nameWithType.vb: Vector4.-(Vector4)
  fullName.vb: netDxf.Vector4.-(netDxf.Vector4)
  name.vb: -(Vector4)
- uid: netDxf.Vector4.Negate(netDxf.Vector4)
  commentId: M:netDxf.Vector4.Negate(netDxf.Vector4)
  id: Negate(netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Negate(Vector4)
  nameWithType: Vector4.Negate(Vector4)
  fullName: netDxf.Vector4.Negate(netDxf.Vector4)
  type: Method
  source:
    id: Negate
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 425
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Negates a vector.
  example: []
  syntax:
    content: public static Vector4 Negate(Vector4 u)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The negative vector of u.
    content.vb: Public Shared Function Negate(u As Vector4) As Vector4
  overload: netDxf.Vector4.Negate*
- uid: netDxf.Vector4.op_Multiply(netDxf.Vector4,System.Double)
  commentId: M:netDxf.Vector4.op_Multiply(netDxf.Vector4,System.Double)
  id: op_Multiply(netDxf.Vector4,System.Double)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator *(Vector4, double)
  nameWithType: Vector4.operator *(Vector4, double)
  fullName: netDxf.Vector4.operator *(netDxf.Vector4, double)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 436
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a vector with an scalar (same as a*u, commutative property).
  example: []
  syntax:
    content: public static Vector4 operator *(Vector4 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times a.
    content.vb: Public Shared Operator *(u As Vector4, a As Double) As Vector4
  overload: netDxf.Vector4.op_Multiply*
  nameWithType.vb: Vector4.*(Vector4, Double)
  fullName.vb: netDxf.Vector4.*(netDxf.Vector4, Double)
  name.vb: '*(Vector4, Double)'
- uid: netDxf.Vector4.Multiply(netDxf.Vector4,System.Double)
  commentId: M:netDxf.Vector4.Multiply(netDxf.Vector4,System.Double)
  id: Multiply(netDxf.Vector4,System.Double)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Multiply(Vector4, double)
  nameWithType: Vector4.Multiply(Vector4, double)
  fullName: netDxf.Vector4.Multiply(netDxf.Vector4, double)
  type: Method
  source:
    id: Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 447
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a vector with an scalar (same as a*u, commutative property).
  example: []
  syntax:
    content: public static Vector4 Multiply(Vector4 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times a.
    content.vb: Public Shared Function Multiply(u As Vector4, a As Double) As Vector4
  overload: netDxf.Vector4.Multiply*
  nameWithType.vb: Vector4.Multiply(Vector4, Double)
  fullName.vb: netDxf.Vector4.Multiply(netDxf.Vector4, Double)
  name.vb: Multiply(Vector4, Double)
- uid: netDxf.Vector4.op_Multiply(System.Double,netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_Multiply(System.Double,netDxf.Vector4)
  id: op_Multiply(System.Double,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator *(double, Vector4)
  nameWithType: Vector4.operator *(double, Vector4)
  fullName: netDxf.Vector4.operator *(double, netDxf.Vector4)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 458
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a scalar with a vector (same as u*a, commutative property).
  example: []
  syntax:
    content: public static Vector4 operator *(double a, Vector4 u)
    parameters:
    - id: a
      type: System.Double
      description: Scalar.
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times a.
    content.vb: Public Shared Operator *(a As Double, u As Vector4) As Vector4
  overload: netDxf.Vector4.op_Multiply*
  nameWithType.vb: Vector4.*(Double, Vector4)
  fullName.vb: netDxf.Vector4.*(Double, netDxf.Vector4)
  name.vb: '*(Double, Vector4)'
- uid: netDxf.Vector4.Multiply(System.Double,netDxf.Vector4)
  commentId: M:netDxf.Vector4.Multiply(System.Double,netDxf.Vector4)
  id: Multiply(System.Double,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Multiply(double, Vector4)
  nameWithType: Vector4.Multiply(double, Vector4)
  fullName: netDxf.Vector4.Multiply(double, netDxf.Vector4)
  type: Method
  source:
    id: Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 469
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies a scalar with a vector (same as u*a, commutative property).
  example: []
  syntax:
    content: public static Vector4 Multiply(double a, Vector4 u)
    parameters:
    - id: a
      type: System.Double
      description: Scalar.
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times a.
    content.vb: Public Shared Function Multiply(a As Double, u As Vector4) As Vector4
  overload: netDxf.Vector4.Multiply*
  nameWithType.vb: Vector4.Multiply(Double, Vector4)
  fullName.vb: netDxf.Vector4.Multiply(Double, netDxf.Vector4)
  name.vb: Multiply(Double, Vector4)
- uid: netDxf.Vector4.op_Multiply(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_Multiply(netDxf.Vector4,netDxf.Vector4)
  id: op_Multiply(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator *(Vector4, Vector4)
  nameWithType: Vector4.operator *(Vector4, Vector4)
  fullName: netDxf.Vector4.operator *(netDxf.Vector4, netDxf.Vector4)
  type: Operator
  source:
    id: op_Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 480
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies two vectors component by component.
  example: []
  syntax:
    content: public static Vector4 operator *(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times v.
    content.vb: Public Shared Operator *(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.op_Multiply*
  nameWithType.vb: Vector4.*(Vector4, Vector4)
  fullName.vb: netDxf.Vector4.*(netDxf.Vector4, netDxf.Vector4)
  name.vb: '*(Vector4, Vector4)'
- uid: netDxf.Vector4.Multiply(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.Multiply(netDxf.Vector4,netDxf.Vector4)
  id: Multiply(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Multiply(Vector4, Vector4)
  nameWithType: Vector4.Multiply(Vector4, Vector4)
  fullName: netDxf.Vector4.Multiply(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: Multiply
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 491
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Multiplies two vectors component by component.
  example: []
  syntax:
    content: public static Vector4 Multiply(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times v.
    content.vb: Public Shared Function Multiply(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.Multiply*
- uid: netDxf.Vector4.op_Division(netDxf.Vector4,System.Double)
  commentId: M:netDxf.Vector4.op_Division(netDxf.Vector4,System.Double)
  id: op_Division(netDxf.Vector4,System.Double)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator /(Vector4, double)
  nameWithType: Vector4.operator /(Vector4, double)
  fullName: netDxf.Vector4.operator /(netDxf.Vector4, double)
  type: Operator
  source:
    id: op_Division
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 502
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides an scalar with a vector.
  example: []
  syntax:
    content: public static Vector4 operator /(Vector4 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector4
      description: The division of u times a.
    content.vb: Public Shared Operator /(u As Vector4, a As Double) As Vector4
  overload: netDxf.Vector4.op_Division*
  nameWithType.vb: Vector4./(Vector4, Double)
  fullName.vb: netDxf.Vector4./(netDxf.Vector4, Double)
  name.vb: /(Vector4, Double)
- uid: netDxf.Vector4.Divide(netDxf.Vector4,System.Double)
  commentId: M:netDxf.Vector4.Divide(netDxf.Vector4,System.Double)
  id: Divide(netDxf.Vector4,System.Double)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Divide(Vector4, double)
  nameWithType: Vector4.Divide(Vector4, double)
  fullName: netDxf.Vector4.Divide(netDxf.Vector4, double)
  type: Method
  source:
    id: Divide
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 514
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides a vector with an scalar.
  example: []
  syntax:
    content: public static Vector4 Divide(Vector4 u, double a)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: a
      type: System.Double
      description: Scalar.
    return:
      type: netDxf.Vector4
      description: The division of u times a.
    content.vb: Public Shared Function Divide(u As Vector4, a As Double) As Vector4
  overload: netDxf.Vector4.Divide*
  nameWithType.vb: Vector4.Divide(Vector4, Double)
  fullName.vb: netDxf.Vector4.Divide(netDxf.Vector4, Double)
  name.vb: Divide(Vector4, Double)
- uid: netDxf.Vector4.op_Division(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.op_Division(netDxf.Vector4,netDxf.Vector4)
  id: op_Division(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: operator /(Vector4, Vector4)
  nameWithType: Vector4.operator /(Vector4, Vector4)
  fullName: netDxf.Vector4.operator /(netDxf.Vector4, netDxf.Vector4)
  type: Operator
  source:
    id: op_Division
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 526
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides two vectors component by component.
  example: []
  syntax:
    content: public static Vector4 operator /(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times v.
    content.vb: Public Shared Operator /(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.op_Division*
  nameWithType.vb: Vector4./(Vector4, Vector4)
  fullName.vb: netDxf.Vector4./(netDxf.Vector4, netDxf.Vector4)
  name.vb: /(Vector4, Vector4)
- uid: netDxf.Vector4.Divide(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.Divide(netDxf.Vector4,netDxf.Vector4)
  id: Divide(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Divide(Vector4, Vector4)
  nameWithType: Vector4.Divide(Vector4, Vector4)
  fullName: netDxf.Vector4.Divide(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: Divide
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 537
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Divides two vectors component by component.
  example: []
  syntax:
    content: public static Vector4 Divide(Vector4 u, Vector4 v)
    parameters:
    - id: u
      type: netDxf.Vector4
      description: Vector4.
    - id: v
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: netDxf.Vector4
      description: The multiplication of u times v.
    content.vb: Public Shared Function Divide(u As Vector4, v As Vector4) As Vector4
  overload: netDxf.Vector4.Divide*
- uid: netDxf.Vector4.Normalize
  commentId: M:netDxf.Vector4.Normalize
  id: Normalize
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: Vector4.Normalize()
  fullName: netDxf.Vector4.Normalize()
  type: Method
  source:
    id: Normalize
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 549
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Normalizes the current vector.
  example: []
  syntax:
    content: public void Normalize()
    content.vb: Public Sub Normalize()
  overload: netDxf.Vector4.Normalize*
- uid: netDxf.Vector4.Modulus
  commentId: M:netDxf.Vector4.Modulus
  id: Modulus
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Modulus()
  nameWithType: Vector4.Modulus()
  fullName: netDxf.Vector4.Modulus()
  type: Method
  source:
    id: Modulus
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 576
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains the modulus of the vector.
  example: []
  syntax:
    content: public double Modulus()
    return:
      type: System.Double
      description: Vector modulus.
    content.vb: Public Function Modulus() As Double
  overload: netDxf.Vector4.Modulus*
- uid: netDxf.Vector4.ToArray
  commentId: M:netDxf.Vector4.ToArray
  id: ToArray
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: Vector4.ToArray()
  fullName: netDxf.Vector4.ToArray()
  type: Method
  source:
    id: ToArray
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 585
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns an array that represents the vector.
  example: []
  syntax:
    content: public double[] ToArray()
    return:
      type: System.Double[]
      description: Array.
    content.vb: Public Function ToArray() As Double()
  overload: netDxf.Vector4.ToArray*
- uid: netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4)
  commentId: M:netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4)
  id: Equals(netDxf.Vector4,netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Equals(Vector4, Vector4)
  nameWithType: Vector4.Equals(Vector4, Vector4)
  fullName: netDxf.Vector4.Equals(netDxf.Vector4, netDxf.Vector4)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 600
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equal.
  example: []
  syntax:
    content: public static bool Equals(Vector4 a, Vector4 b)
    parameters:
    - id: a
      type: netDxf.Vector4
      description: Vector4.
    - id: b
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Boolean
      description: True if the four components are almost equal or false in any other case.
    content.vb: Public Shared Function Equals(a As Vector4, b As Vector4) As Boolean
  overload: netDxf.Vector4.Equals*
- uid: netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4,System.Double)
  commentId: M:netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4,System.Double)
  id: Equals(netDxf.Vector4,netDxf.Vector4,System.Double)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Equals(Vector4, Vector4, double)
  nameWithType: Vector4.Equals(Vector4, Vector4, double)
  fullName: netDxf.Vector4.Equals(netDxf.Vector4, netDxf.Vector4, double)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 612
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equal.
  example: []
  syntax:
    content: public static bool Equals(Vector4 a, Vector4 b, double threshold)
    parameters:
    - id: a
      type: netDxf.Vector4
      description: Vector4.
    - id: b
      type: netDxf.Vector4
      description: Vector4.
    - id: threshold
      type: System.Double
      description: Maximum tolerance.
    return:
      type: System.Boolean
      description: True if the four components are almost equal or false in any other case.
    content.vb: Public Shared Function Equals(a As Vector4, b As Vector4, threshold As Double) As Boolean
  overload: netDxf.Vector4.Equals*
  nameWithType.vb: Vector4.Equals(Vector4, Vector4, Double)
  fullName.vb: netDxf.Vector4.Equals(netDxf.Vector4, netDxf.Vector4, Double)
  name.vb: Equals(Vector4, Vector4, Double)
- uid: netDxf.Vector4.Equals(netDxf.Vector4)
  commentId: M:netDxf.Vector4.Equals(netDxf.Vector4)
  id: Equals(netDxf.Vector4)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Equals(Vector4)
  nameWithType: Vector4.Equals(Vector4)
  fullName: netDxf.Vector4.Equals(netDxf.Vector4)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 622
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equal.
  example: []
  syntax:
    content: public bool Equals(Vector4 other)
    parameters:
    - id: other
      type: netDxf.Vector4
      description: Vector4.
    return:
      type: System.Boolean
      description: True if the four components are almost equal or false in any other case.
    content.vb: Public Function Equals(other As Vector4) As Boolean
  overload: netDxf.Vector4.Equals*
  implements:
  - System.IEquatable{netDxf.Vector4}.Equals(netDxf.Vector4)
- uid: netDxf.Vector4.Equals(netDxf.Vector4,System.Double)
  commentId: M:netDxf.Vector4.Equals(netDxf.Vector4,System.Double)
  id: Equals(netDxf.Vector4,System.Double)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Equals(Vector4, double)
  nameWithType: Vector4.Equals(Vector4, double)
  fullName: netDxf.Vector4.Equals(netDxf.Vector4, double)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 633
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Check if the components of two vectors are approximate equal.
  example: []
  syntax:
    content: public bool Equals(Vector4 other, double threshold)
    parameters:
    - id: other
      type: netDxf.Vector4
      description: Vector4.
    - id: threshold
      type: System.Double
      description: Maximum tolerance.
    return:
      type: System.Boolean
      description: True if the four components are almost equal or false in any other case.
    content.vb: Public Function Equals(other As Vector4, threshold As Double) As Boolean
  overload: netDxf.Vector4.Equals*
  nameWithType.vb: Vector4.Equals(Vector4, Double)
  fullName.vb: netDxf.Vector4.Equals(netDxf.Vector4, Double)
  name.vb: Equals(Vector4, Double)
- uid: netDxf.Vector4.Equals(System.Object)
  commentId: M:netDxf.Vector4.Equals(System.Object)
  id: Equals(System.Object)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Vector4.Equals(object)
  fullName: netDxf.Vector4.Equals(object)
  type: Method
  source:
    id: Equals
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 646
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
      description: Another object to compare to.
    return:
      type: System.Boolean
      description: True if obj and this instance are the same type and represent the same value; otherwise, false.
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: netDxf.Vector4.Equals*
  nameWithType.vb: Vector4.Equals(Object)
  fullName.vb: netDxf.Vector4.Equals(Object)
  name.vb: Equals(Object)
- uid: netDxf.Vector4.GetHashCode
  commentId: M:netDxf.Vector4.GetHashCode
  id: GetHashCode
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector4.GetHashCode()
  fullName: netDxf.Vector4.GetHashCode()
  type: Method
  source:
    id: GetHashCode
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 660
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: netDxf.Vector4.GetHashCode*
- uid: netDxf.Vector4.ToString
  commentId: M:netDxf.Vector4.ToString
  id: ToString
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector4.ToString()
  fullName: netDxf.Vector4.ToString()
  type: Method
  source:
    id: ToString
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 673
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains a string that represents the vector.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string text.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: netDxf.Vector4.ToString*
- uid: netDxf.Vector4.ToString(System.IFormatProvider)
  commentId: M:netDxf.Vector4.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: netDxf.Vector4
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: Vector4.ToString(IFormatProvider)
  fullName: netDxf.Vector4.ToString(System.IFormatProvider)
  type: Method
  source:
    id: ToString
    path: /Users/wieslawsoltes/GitHub/DxfToCSharp/external/netDxf/netDxf/Vector4.cs
    startLine: 683
  assemblies:
  - netDxf
  namespace: netDxf
  summary: Obtains a string that represents the vector.
  example: []
  syntax:
    content: public string ToString(IFormatProvider provider)
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An IFormatProvider interface implementation that supplies culture-specific formatting information.
    return:
      type: System.String
      description: A string text.
    content.vb: Public Function ToString(provider As IFormatProvider) As String
  overload: netDxf.Vector4.ToString*
references:
- uid: netDxf
  commentId: N:netDxf
  href: netDxf.html
  name: netDxf
  nameWithType: netDxf
  fullName: netDxf
- uid: System.IEquatable{netDxf.Vector4}
  commentId: T:System.IEquatable{netDxf.Vector4}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<Vector4>
  nameWithType: IEquatable<Vector4>
  fullName: System.IEquatable<netDxf.Vector4>
  nameWithType.vb: IEquatable(Of Vector4)
  fullName.vb: System.IEquatable(Of netDxf.Vector4)
  name.vb: IEquatable(Of Vector4)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: netDxf.Vector4
    name: Vector4
    href: netDxf.Vector4.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: netDxf.Vector4
    name: Vector4
    href: netDxf.Vector4.html
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: netDxf.Vector4.#ctor*
  commentId: Overload:netDxf.Vector4.#ctor
  href: netDxf.Vector4.html#netDxf_Vector4__ctor_System_Double_System_Double_System_Double_System_Double_
  name: Vector4
  nameWithType: Vector4.Vector4
  fullName: netDxf.Vector4.Vector4
  nameWithType.vb: Vector4.New
  fullName.vb: netDxf.Vector4.New
  name.vb: New
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Double[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double[]
  nameWithType: double[]
  fullName: double[]
  nameWithType.vb: Double()
  fullName.vb: Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: (
  - name: )
- uid: netDxf.Vector4.Zero*
  commentId: Overload:netDxf.Vector4.Zero
  href: netDxf.Vector4.html#netDxf_Vector4_Zero
  name: Zero
  nameWithType: Vector4.Zero
  fullName: netDxf.Vector4.Zero
- uid: netDxf.Vector4
  commentId: T:netDxf.Vector4
  parent: netDxf
  href: netDxf.Vector4.html
  name: Vector4
  nameWithType: Vector4
  fullName: netDxf.Vector4
- uid: netDxf.Vector4.UnitX*
  commentId: Overload:netDxf.Vector4.UnitX
  href: netDxf.Vector4.html#netDxf_Vector4_UnitX
  name: UnitX
  nameWithType: Vector4.UnitX
  fullName: netDxf.Vector4.UnitX
- uid: netDxf.Vector4.UnitY*
  commentId: Overload:netDxf.Vector4.UnitY
  href: netDxf.Vector4.html#netDxf_Vector4_UnitY
  name: UnitY
  nameWithType: Vector4.UnitY
  fullName: netDxf.Vector4.UnitY
- uid: netDxf.Vector4.UnitZ*
  commentId: Overload:netDxf.Vector4.UnitZ
  href: netDxf.Vector4.html#netDxf_Vector4_UnitZ
  name: UnitZ
  nameWithType: Vector4.UnitZ
  fullName: netDxf.Vector4.UnitZ
- uid: netDxf.Vector4.UnitW*
  commentId: Overload:netDxf.Vector4.UnitW
  href: netDxf.Vector4.html#netDxf_Vector4_UnitW
  name: UnitW
  nameWithType: Vector4.UnitW
  fullName: netDxf.Vector4.UnitW
- uid: netDxf.Vector4.NaN*
  commentId: Overload:netDxf.Vector4.NaN
  href: netDxf.Vector4.html#netDxf_Vector4_NaN
  name: NaN
  nameWithType: Vector4.NaN
  fullName: netDxf.Vector4.NaN
- uid: netDxf.Vector4.X*
  commentId: Overload:netDxf.Vector4.X
  href: netDxf.Vector4.html#netDxf_Vector4_X
  name: X
  nameWithType: Vector4.X
  fullName: netDxf.Vector4.X
- uid: netDxf.Vector4.Y*
  commentId: Overload:netDxf.Vector4.Y
  href: netDxf.Vector4.html#netDxf_Vector4_Y
  name: Y
  nameWithType: Vector4.Y
  fullName: netDxf.Vector4.Y
- uid: netDxf.Vector4.Z*
  commentId: Overload:netDxf.Vector4.Z
  href: netDxf.Vector4.html#netDxf_Vector4_Z
  name: Z
  nameWithType: Vector4.Z
  fullName: netDxf.Vector4.Z
- uid: netDxf.Vector4.W*
  commentId: Overload:netDxf.Vector4.W
  href: netDxf.Vector4.html#netDxf_Vector4_W
  name: W
  nameWithType: Vector4.W
  fullName: netDxf.Vector4.W
- uid: netDxf.Vector4.Item*
  commentId: Overload:netDxf.Vector4.Item
  href: netDxf.Vector4.html#netDxf_Vector4_Item_System_Int32_
  name: this
  nameWithType: Vector4.this
  fullName: netDxf.Vector4.this
  nameWithType.vb: Vector4.this[]
  fullName.vb: netDxf.Vector4.this[]
  name.vb: this[]
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: netDxf.Vector4.IsNormalized*
  commentId: Overload:netDxf.Vector4.IsNormalized
  href: netDxf.Vector4.html#netDxf_Vector4_IsNormalized
  name: IsNormalized
  nameWithType: Vector4.IsNormalized
  fullName: netDxf.Vector4.IsNormalized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Double.NaN
  commentId: F:System.Double.NaN
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double.nan
  name: NaN
  nameWithType: double.NaN
  fullName: double.NaN
  nameWithType.vb: Double.NaN
  fullName.vb: Double.NaN
- uid: netDxf.Vector4.IsNaN*
  commentId: Overload:netDxf.Vector4.IsNaN
  href: netDxf.Vector4.html#netDxf_Vector4_IsNaN_netDxf_Vector4_
  name: IsNaN
  nameWithType: Vector4.IsNaN
  fullName: netDxf.Vector4.IsNaN
- uid: netDxf.Vector4.IsZero*
  commentId: Overload:netDxf.Vector4.IsZero
  href: netDxf.Vector4.html#netDxf_Vector4_IsZero_netDxf_Vector4_
  name: IsZero
  nameWithType: Vector4.IsZero
  fullName: netDxf.Vector4.IsZero
- uid: netDxf.Vector4.DotProduct*
  commentId: Overload:netDxf.Vector4.DotProduct
  href: netDxf.Vector4.html#netDxf_Vector4_DotProduct_netDxf_Vector4_netDxf_Vector4_
  name: DotProduct
  nameWithType: Vector4.DotProduct
  fullName: netDxf.Vector4.DotProduct
- uid: netDxf.Vector4.Distance*
  commentId: Overload:netDxf.Vector4.Distance
  href: netDxf.Vector4.html#netDxf_Vector4_Distance_netDxf_Vector4_netDxf_Vector4_
  name: Distance
  nameWithType: Vector4.Distance
  fullName: netDxf.Vector4.Distance
- uid: netDxf.Vector4.SquareDistance*
  commentId: Overload:netDxf.Vector4.SquareDistance
  href: netDxf.Vector4.html#netDxf_Vector4_SquareDistance_netDxf_Vector4_netDxf_Vector4_
  name: SquareDistance
  nameWithType: Vector4.SquareDistance
  fullName: netDxf.Vector4.SquareDistance
- uid: netDxf.Vector4.Round*
  commentId: Overload:netDxf.Vector4.Round
  href: netDxf.Vector4.html#netDxf_Vector4_Round_netDxf_Vector4_System_Int32_
  name: Round
  nameWithType: Vector4.Round
  fullName: netDxf.Vector4.Round
- uid: netDxf.Vector4.Normalize*
  commentId: Overload:netDxf.Vector4.Normalize
  href: netDxf.Vector4.html#netDxf_Vector4_Normalize_netDxf_Vector4_
  name: Normalize
  nameWithType: Vector4.Normalize
  fullName: netDxf.Vector4.Normalize
- uid: netDxf.Vector4.op_Equality*
  commentId: Overload:netDxf.Vector4.op_Equality
  href: netDxf.Vector4.html#netDxf_Vector4_op_Equality_netDxf_Vector4_netDxf_Vector4_
  name: operator ==
  nameWithType: Vector4.operator ==
  fullName: netDxf.Vector4.operator ==
  nameWithType.vb: Vector4.=
  fullName.vb: netDxf.Vector4.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector4.op_Equality*
    name: ==
    href: netDxf.Vector4.html#netDxf_Vector4_op_Equality_netDxf_Vector4_netDxf_Vector4_
- uid: netDxf.Vector4.op_Inequality*
  commentId: Overload:netDxf.Vector4.op_Inequality
  href: netDxf.Vector4.html#netDxf_Vector4_op_Inequality_netDxf_Vector4_netDxf_Vector4_
  name: operator !=
  nameWithType: Vector4.operator !=
  fullName: netDxf.Vector4.operator !=
  nameWithType.vb: Vector4.<>
  fullName.vb: netDxf.Vector4.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector4.op_Inequality*
    name: '!='
    href: netDxf.Vector4.html#netDxf_Vector4_op_Inequality_netDxf_Vector4_netDxf_Vector4_
- uid: netDxf.Vector4.op_Addition*
  commentId: Overload:netDxf.Vector4.op_Addition
  href: netDxf.Vector4.html#netDxf_Vector4_op_Addition_netDxf_Vector4_netDxf_Vector4_
  name: operator +
  nameWithType: Vector4.operator +
  fullName: netDxf.Vector4.operator +
  nameWithType.vb: Vector4.+
  fullName.vb: netDxf.Vector4.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector4.op_Addition*
    name: +
    href: netDxf.Vector4.html#netDxf_Vector4_op_Addition_netDxf_Vector4_netDxf_Vector4_
- uid: netDxf.Vector4.Add*
  commentId: Overload:netDxf.Vector4.Add
  href: netDxf.Vector4.html#netDxf_Vector4_Add_netDxf_Vector4_netDxf_Vector4_
  name: Add
  nameWithType: Vector4.Add
  fullName: netDxf.Vector4.Add
- uid: netDxf.Vector4.op_Subtraction*
  commentId: Overload:netDxf.Vector4.op_Subtraction
  href: netDxf.Vector4.html#netDxf_Vector4_op_Subtraction_netDxf_Vector4_netDxf_Vector4_
  name: operator -
  nameWithType: Vector4.operator -
  fullName: netDxf.Vector4.operator -
  nameWithType.vb: Vector4.-
  fullName.vb: netDxf.Vector4.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector4.op_Subtraction*
    name: '-'
    href: netDxf.Vector4.html#netDxf_Vector4_op_Subtraction_netDxf_Vector4_netDxf_Vector4_
- uid: netDxf.Vector4.Subtract*
  commentId: Overload:netDxf.Vector4.Subtract
  href: netDxf.Vector4.html#netDxf_Vector4_Subtract_netDxf_Vector4_netDxf_Vector4_
  name: Subtract
  nameWithType: Vector4.Subtract
  fullName: netDxf.Vector4.Subtract
- uid: netDxf.Vector4.op_UnaryNegation*
  commentId: Overload:netDxf.Vector4.op_UnaryNegation
  href: netDxf.Vector4.html#netDxf_Vector4_op_UnaryNegation_netDxf_Vector4_
  name: operator -
  nameWithType: Vector4.operator -
  fullName: netDxf.Vector4.operator -
  nameWithType.vb: Vector4.-
  fullName.vb: netDxf.Vector4.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector4.op_UnaryNegation*
    name: '-'
    href: netDxf.Vector4.html#netDxf_Vector4_op_UnaryNegation_netDxf_Vector4_
- uid: netDxf.Vector4.Negate*
  commentId: Overload:netDxf.Vector4.Negate
  href: netDxf.Vector4.html#netDxf_Vector4_Negate_netDxf_Vector4_
  name: Negate
  nameWithType: Vector4.Negate
  fullName: netDxf.Vector4.Negate
- uid: netDxf.Vector4.op_Multiply*
  commentId: Overload:netDxf.Vector4.op_Multiply
  href: netDxf.Vector4.html#netDxf_Vector4_op_Multiply_netDxf_Vector4_System_Double_
  name: operator *
  nameWithType: Vector4.operator *
  fullName: netDxf.Vector4.operator *
  nameWithType.vb: Vector4.*
  fullName.vb: netDxf.Vector4.*
  name.vb: '*'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector4.op_Multiply*
    name: '*'
    href: netDxf.Vector4.html#netDxf_Vector4_op_Multiply_netDxf_Vector4_System_Double_
- uid: netDxf.Vector4.Multiply*
  commentId: Overload:netDxf.Vector4.Multiply
  href: netDxf.Vector4.html#netDxf_Vector4_Multiply_netDxf_Vector4_System_Double_
  name: Multiply
  nameWithType: Vector4.Multiply
  fullName: netDxf.Vector4.Multiply
- uid: netDxf.Vector4.op_Division*
  commentId: Overload:netDxf.Vector4.op_Division
  href: netDxf.Vector4.html#netDxf_Vector4_op_Division_netDxf_Vector4_System_Double_
  name: operator /
  nameWithType: Vector4.operator /
  fullName: netDxf.Vector4.operator /
  nameWithType.vb: Vector4./
  fullName.vb: netDxf.Vector4./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: netDxf.Vector4.op_Division*
    name: /
    href: netDxf.Vector4.html#netDxf_Vector4_op_Division_netDxf_Vector4_System_Double_
- uid: netDxf.Vector4.Divide*
  commentId: Overload:netDxf.Vector4.Divide
  href: netDxf.Vector4.html#netDxf_Vector4_Divide_netDxf_Vector4_System_Double_
  name: Divide
  nameWithType: Vector4.Divide
  fullName: netDxf.Vector4.Divide
- uid: netDxf.Vector4.Modulus*
  commentId: Overload:netDxf.Vector4.Modulus
  href: netDxf.Vector4.html#netDxf_Vector4_Modulus
  name: Modulus
  nameWithType: Vector4.Modulus
  fullName: netDxf.Vector4.Modulus
- uid: netDxf.Vector4.ToArray*
  commentId: Overload:netDxf.Vector4.ToArray
  href: netDxf.Vector4.html#netDxf_Vector4_ToArray
  name: ToArray
  nameWithType: Vector4.ToArray
  fullName: netDxf.Vector4.ToArray
- uid: netDxf.Vector4.Equals*
  commentId: Overload:netDxf.Vector4.Equals
  href: netDxf.Vector4.html#netDxf_Vector4_Equals_netDxf_Vector4_netDxf_Vector4_
  name: Equals
  nameWithType: Vector4.Equals
  fullName: netDxf.Vector4.Equals
- uid: System.IEquatable{netDxf.Vector4}.Equals(netDxf.Vector4)
  commentId: M:System.IEquatable{netDxf.Vector4}.Equals(netDxf.Vector4)
  parent: System.IEquatable{netDxf.Vector4}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(Vector4)
  nameWithType: IEquatable<Vector4>.Equals(Vector4)
  fullName: System.IEquatable<netDxf.Vector4>.Equals(netDxf.Vector4)
  nameWithType.vb: IEquatable(Of Vector4).Equals(Vector4)
  fullName.vb: System.IEquatable(Of netDxf.Vector4).Equals(netDxf.Vector4)
  spec.csharp:
  - uid: System.IEquatable{netDxf.Vector4}.Equals(netDxf.Vector4)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: netDxf.Vector4
    name: Vector4
    href: netDxf.Vector4.html
  - name: )
  spec.vb:
  - uid: System.IEquatable{netDxf.Vector4}.Equals(netDxf.Vector4)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: netDxf.Vector4
    name: Vector4
    href: netDxf.Vector4.html
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: netDxf.Vector4.GetHashCode*
  commentId: Overload:netDxf.Vector4.GetHashCode
  href: netDxf.Vector4.html#netDxf_Vector4_GetHashCode
  name: GetHashCode
  nameWithType: Vector4.GetHashCode
  fullName: netDxf.Vector4.GetHashCode
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: netDxf.Vector4.ToString*
  commentId: Overload:netDxf.Vector4.ToString
  href: netDxf.Vector4.html#netDxf_Vector4_ToString
  name: ToString
  nameWithType: Vector4.ToString
  fullName: netDxf.Vector4.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iformatprovider
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
